{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2019/08/01/react-state-provider-hook/","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"e6f9619c-60a6-5d2a-9208-a198421921ed","excerpt":"I love how simple React makes using global state in an application so simple. It’s API is simple, predictable and easy to grok (IMO). You can have as many state…","html":"<p>I love how simple <a href=\"https://reactjs.org/\">React</a> makes using global state in an application so simple. It’s API is simple, predictable and easy to <a href=\"https://en.wikipedia.org/wiki/Grok\">grok</a> (IMO). You can have as many state providers as you want to separate chunks of state into logical chunks. Let’s say you have a simple email application so you could choose to separate loading emails and the address book into separate state providers. The reason for separating it is each thing has different actions to work with the state. For example, both will have the different CRUD actions but how you work with each may require different application logic.</p>\n<p>I’m not going to build everything so you’ll have to fill in some blanks. What I want to do is how I structure multiple state providers and later we’ll add a way to use React Hooks.</p>\n<h2>Using Providers</h2>\n<p>To add a state provider, you add the provider to your <code class=\"language-text\">App</code> component. So you’ll have something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// src/App.tsx</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AddressBookProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/AddressBook.tsx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EmailProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/Email.tsx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AddressBookProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmailProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      // the rest of your application or router\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">EmailProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AddressBookProvider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Like I said, you can have as many providers here as you wish. The more providers you have and what the rest of the <code class=\"language-text\">App</code> component will look like (maybe using <a href=\"https://reacttraining.com/react-router/\">react-router</a>), the more the <code class=\"language-text\">App</code> component begins to grow in complexity. Instead, I like to create a <code class=\"language-text\">Providers</code> component that will wrap all the providers like we see in the <code class=\"language-text\">App</code> component and it will help simplify the <code class=\"language-text\">App</code> component. The <code class=\"language-text\">Providers</code> component will look almost identical to the <code class=\"language-text\">App</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// src/state/Providers.tsx</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> FunctionComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AddressBookProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/AddressBook.tsx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EmailProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/Email.tsx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Providers<span class=\"token operator\">:</span> FunctionComponent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Props</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = ({ children }) => (\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AddressBookProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmailProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">EmailProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AddressBookProvider</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n);\n\nexport default Providers;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And now the <code class=\"language-text\">App</code> component would be able to just use the <code class=\"language-text\">Providers</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// src/App.tsx</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Providers <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/Providers.tsx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Providers</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    // the rest of your application or router\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Providers</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So now as your application grows and if you add more providers, your <code class=\"language-text\">App</code> component doesn’t increase in complexity and nesting, that is abstracted away by the <code class=\"language-text\">Providers</code> component. I know from these small snippets it doesn’t show much benefit but in real applications, organizing in proper places can help tremendously.</p>\n<h2>Using Global State</h2>\n<p>Once you have added the state provider to the <code class=\"language-text\">Providers</code> component (which is then bootstrapped into the <code class=\"language-text\">App</code> component), any component can get the state and will re-render whenever that state changes. To do this, the component will use the state context along with the <a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\"><code class=\"language-text\">useContext</code></a> hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// src/components/Email/List/index.tsx</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EmailContext<span class=\"token punctuation\">,</span> ContextArray<span class=\"token punctuation\">,</span> Email <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/Email.tsx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">EmailList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ContextArray <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>EmailContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// data hasn't been loaded yet</span>\n    <span class=\"token comment\">// maybe show loading spinner</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">No emails!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token operator\">:</span> Email</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>email<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> EmailList<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here, we use React’s <code class=\"language-text\">useContext</code> hook and pass it the email context. Check if it was loaded, has emails and finally you get to rendering the email list itself. Now if something else, maybe a search field in a header, filters the emails this <code class=\"language-text\">EmailList</code> component will get re-rendered thanks to using the <code class=\"language-text\">useContext</code> hook. This means there is nothing more you have to do to keep this <code class=\"language-text\">EmailList</code> in sync with that email state; it’ll just work.</p>\n<h2>Email State</h2>\n<p>Before we get too far, let’s look at what our email state context and provider looks. We’ll just look at a small example, I won’t complicate it by using <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\"><code class=\"language-text\">useReducer</code></a> even if we would maybe likely use it in this instance just to keep this blog scoped small.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// src/state/Email.tsx</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Context<span class=\"token punctuation\">,</span> Dispatch<span class=\"token punctuation\">,</span> FunctionComponent<span class=\"token punctuation\">,</span> SetStateAction<span class=\"token punctuation\">,</span> createContext<span class=\"token punctuation\">,</span> useContext<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Email</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// more fields...</span>\n  subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Email<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ContextArray</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>State<span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span>SetStateAction<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">State</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">>];\n\nexport const EmailContext: Context</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>any</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = createContext([</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">, Function]);\n\ninterface Props </span><span class=\"token punctuation\">{</span>\n  children<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\nconst EmailProvider: FunctionComponent</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Props</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> = ({ children }) => </span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EmailContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">EmailContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token plain-text\">;\n\nexport default EmailProvider;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>A few things are done here. We have some interfaces to describe the state object and what an email looks like; these could go into your typings directory but we’ll keep things simple for this blog. I like to have a type to describe the context array that will be used for <code class=\"language-text\">useContext</code> so each usage can use this one type instead of duplicating the type per usage. The context is created, this is what will hold the state. We create a provider, use the <a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code class=\"language-text\">useState</code></a> React Hook passing an empty object.</p>\n<p>This is all we need to use state globally in an application. Now I’m not going into how to load the emails or work with them (like filtering to creating a new email), that’s just not what I aim to do with this blog.</p>\n<h2>Our Own Hook</h2>\n<p>What we just saw using <code class=\"language-text\">useContext</code> isn’t complex, but maybe we can make it a little more approachable. One of my favorite updates to a library I’ve ever used from any language may be <a href=\"https://reactjs.org/docs/hooks-intro.html\">React Hooks</a>. I love the Hooks api, I have seen them be used in some truly amazing ways. For this blog, let’s look at updating our <code class=\"language-text\">EmailList</code> component to use a custom hook and then we’ll see how to actually creating the hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token comment\">// src/components/Email/List/index.tsx</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ContextArray<span class=\"token punctuation\">,</span> Email<span class=\"token punctuation\">,</span> useEmails <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state/Email.tsx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">EmailList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> ContextArray <span class=\"token operator\">=</span> <span class=\"token function\">useEmails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// data hasn't been loaded yet</span>\n    <span class=\"token comment\">// maybe show loading spinner</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">No emails!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token operator\">:</span> Email</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>email<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> EmailList<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ok, this simple example, not much as changed. Instead of using the <code class=\"language-text\">useContext</code> React Hook, we are using the <code class=\"language-text\">useEmails</code> custom hook we will create shortly. The reason I like doing this is there no longer is a need to import the actual context and pass that to React’s <code class=\"language-text\">useContext</code>. We are simplifying separate usages, making the “complex” code appear only once in our code base (our <code class=\"language-text\">useEmails</code> hook) but you’ll see, it’s not complex at all so it’s really only a benefit with no sacrifice.</p>\n<h2>Our Custom Hook</h2>\n<p>To create our own hook, all we need to do is add this bit of code to the end of <code class=\"language-text\">src/state/Email.tsx</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useEmails</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>EmailContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>So you can see, our hook really just does the <code class=\"language-text\">useContext</code> for us. It’s not a huge savings here but it is something I do enjoy. Small wins are still wins in my book!</p>\n<h2>Conclusion</h2>\n<p>This blog only shows some small wins but sometimes small wins have large impacts. Maybe it’s from my time working on Ext JS but I tend to think about how I can abstract away duplicate code. While sometimes that abstraction can lead to other issues (like performance), the two things I showed in this blog, the <code class=\"language-text\">Providers</code> component and <code class=\"language-text\">useEmails</code> hook, have only been a good thing for the React projects I’ve worked on.</p>","fields":{"readingTime":{"text":"7 min read"},"slug":"/2019/08/01/react-state-provider-hook/"},"frontmatter":{"title":"React State Provider with Hooks","date":"August 01, 2019"}}},"pageContext":{"slug":"/2019/08/01/react-state-provider-hook/","previous":{"fields":{"slug":"/2019/07/26/move-to-github-pages/"},"frontmatter":{"title":"My Move to GitHub Pages"}},"next":{"fields":{"slug":"/2019/08/07/why-typescript-paths-failed-me/"},"frontmatter":{"title":"Why TypeScript Paths Failed Me"}}}},"staticQueryHashes":["63159454","734670849"]}