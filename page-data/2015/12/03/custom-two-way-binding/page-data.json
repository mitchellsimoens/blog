{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2015/12/03/custom-two-way-binding/","webpackCompilationHash":"404118be10adc6e8f540","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"498c5c4a-b045-521f-901f-afd12f2733ea","excerpt":"When Ext JS 5 was released it brought with it data binding including two-way data binding. Although some argue that two way data binding is an anti-pattern, it…","html":"<p>When <a href=\"https://www.sencha.com/products/extjs/\">Ext JS</a> 5 was released it brought with it data binding including two-way data binding. Although some argue that two way data binding is an anti-pattern, it does have it’s uses. Many Ext JS components have two-way binding ready by default (for example, <a href=\"http://examples.sencha.com/extjs/6.0.1/examples/kitchensink/#binding-two-way\">this Kitchen Sink example</a>) but there may be cases where you want to setup a custom bindings. At a high level, what I want is when one component changes, another component changes in response automatically and if that second component changes, the first component also changes.</p>\n<h2>First Attempt</h2>\n<p>As a use case, I was recently asked how to collapse/expand a <code class=\"language-text\">Ext.form.FieldSet</code> using data binding. Without any custom things, it’s possible like so:</p>\n<iframe style=\"border: 0;height: 600px;width: 600px;\" src=\"https://fiddle.sencha.com/fiddle/120u\"></iframe>\n<p>In this fiddle, the<code class=\"language-text\">Ext.form.field.Checkbox</code> under the <code class=\"language-text\">FieldSet</code> will toggle whether the <code class=\"language-text\">FieldSet</code> is expanded or not. However, that’s kind of weird because we are binding to <code class=\"language-text\">expanded</code> but that’s not a config of <code class=\"language-text\">FieldSet</code>. The reason I used it is because binding requires a setter function so in this case the <code class=\"language-text\">FieldSet</code> needs (and does albeit being private) have a <code class=\"language-text\">setExpanded</code> method in order for binding to work. <code class=\"language-text\">FieldSet</code> does have a <code class=\"language-text\">collapsed</code> config but binding needs a setter and there is no <code class=\"language-text\">setCollapsed</code> method. We could create a simple override to add one:</p>\n<iframe style=\"border: 0;height: 600px;width: 600px;\" src=\"https://fiddle.sencha.com/fiddle/120v\"></iframe>\n<p>That looks better! However, if we manually collapse/expand the <code class=\"language-text\">FieldSet</code>, the <code class=\"language-text\">Checkbox</code> will not reflect this change so it’s only one-way currently. This is where we need to do some custom stuff in order to have two-way binding. There are two ways to have two-way binding and which to use depends on if the config you want to change is within the config object (so setter and getter methods are automatically created for you).</p>\n<h2>Manual Two-Way Binding</h2>\n<p>To get the new value up to the <code class=\"language-text\">Ext.app.ViewModel</code> on the form, the <code class=\"language-text\">publishState</code> method must be executed passing in the name and value. The <code class=\"language-text\">FieldSet</code> will fire <code class=\"language-text\">collapse</code> and <code class=\"language-text\">expand</code> events when it has been collapsed/expanded so we can add listeners to it in order to execute that <code class=\"language-text\">publishState</code> method:</p>\n<iframe style=\"border: 0;height: 600px;width: 600px;\" src=\"https://fiddle.sencha.com/fiddle/120t\"></iframe>\n<p>In the <code class=\"language-text\">initComponent</code> method, I add listeners to the <code class=\"language-text\">collapse</code> and <code class=\"language-text\">expand</code> events which will execute the <code class=\"language-text\">publishCollapsed</code> method. If rendered, this will execute <code class=\"language-text\">publishState</code> meaning two-way binding is setup.</p>\n<h2>Automatic Two-Way Binding</h2>\n<p>Like I said before, the way to know if you need to hookup the <code class=\"language-text\">publishState</code> method execution or if Ext JS can handle it automatically for you is whether the config you are binding to is within the config object. The <code class=\"language-text\">collapsed</code> config is not part of the config object but what if we had a custom config, how can we get that custom config to be two-way bindable? This is where <code class=\"language-text\">twoWayBindable</code> comes in handy to hook things up for us:</p>\n<iframe style=\"border: 0;height: 600px;width: 600px;\" src=\"https://fiddle.sencha.com/fiddle/121e\"></iframe>\n<p>When <code class=\"language-text\">setFoo</code> is executed, we check to see if the <code class=\"language-text\">FieldSet</code> is already collapsed/expanded and then execute the <code class=\"language-text\">setExpanded</code> if not. We had to add the <code class=\"language-text\">setFoo</code> call to <code class=\"language-text\">setExpanded</code> also to hook into when the <code class=\"language-text\">FieldSet</code> is manually collapsed/expanded by the user. That has nothing to do with the binding tho, the bit to pay attention to is the config object and the <code class=\"language-text\">twoWayBindable</code> property. The <code class=\"language-text\">twoWayBindable</code> property is an array of configs and it will then hook into the <code class=\"language-text\">updater</code> for that config to then automatically execute that <code class=\"language-text\">publishState</code> method. So the binding is automatic, the other code is to handle collapsing/expanding when the <code class=\"language-text\">foo</code> config changes.</p>\n<h2>Summary</h2>\n<p>Data binding can be a bit mysterious but having some form of understanding the sequence of things helps go a long way. Knowing that <code class=\"language-text\">publishState</code> and having an associated setter method are important pieces of the binding puzzle. For more, check out the <a href=\"http://docs.sencha.com/extjs/6.0/application_architecture/view_models_data_binding.html\">guide</a> that goes over binding.</p>","fields":{"slug":"/2015/12/03/custom-two-way-binding/"},"frontmatter":{"title":"Custom Two Way Binding!","date":"December 03, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/12/03/custom-two-way-binding/","previous":{"fields":{"slug":"/2015/09/22/loading-ext-direct-api/"},"frontmatter":{"title":"Loading Ext.Direct api"}},"next":{"fields":{"slug":"/2016/03/24/no-dependencies-no-drama/"},"frontmatter":{"title":"No dependencies, no drama!"}}}}}