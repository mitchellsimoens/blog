{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/07/02/delaying-launch-for-stores-to-load/","webpackCompilationHash":"89f576d1737dce10f556","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"51e94bf7-d5fc-5ead-8d78-ee498bb0cfee","excerpt":"A common request I hear from many people is how to delay the application’s  method from being executed. First, let’s investigate the problem. Say you have a…","html":"<p>A common request I hear from many people is how to delay the application’s <code class=\"language-text\">launch</code> method from being executed. First, let’s investigate the problem. Say you have a normal <code class=\"language-text\">app/Application.js</code> that looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ext.define(&#39;Fiddle.Application&#39;, {\n    extend : &#39;Ext.app.Application&#39;,\n\n    name : &#39;Fiddle&#39;,\n\n    stores : [\n        &#39;Store1&#39;,\n        &#39;Store2&#39;,\n        &#39;Store3&#39;\n    ],\n\n    launch : function() {\n        var store1 = Ext.getStore(&#39;Store1&#39;),\n            store2 = Ext.getStore(&#39;Store2&#39;),\n            store3 = Ext.getStore(&#39;Store3&#39;);\n\n        console.log(&#39;store1 isLoaded&#39;, store1.isLoaded());\n        console.log(&#39;store2 isLoaded&#39;, store2.isLoaded());\n        console.log(&#39;store3 isLoaded&#39;, store3.isLoaded());\n\n        Ext.Msg.alert(&#39;Fiddle&#39;, &#39;All stores are loaded!&#39;);\n    }\n});</code></pre></div>\n<p>In the <code class=\"language-text\">launch</code> method you have some code that depends on the stores being loaded. Ok, this example just has some <code class=\"language-text\">console.log</code>s so use your imagination some. I could add logic to the launch method and execute some other method on this class sure but there may be a more elegant way. If you were to run this right now, your <code class=\"language-text\">Ext.Msg.alert</code> would happen but all the <code class=\"language-text\">console.log</code>s would show <code class=\"language-text\">false</code> for the <code class=\"language-text\">isLoaded</code> method calls because the load hasn’t happened yet. So what we need to do is add <code class=\"language-text\">load</code> listeners to the stores and only execute the <code class=\"language-text\">launch</code> method when all stores have loaded.</p>\n<p>What I like to do is keep <code class=\"language-text\">app/Application.js</code> looking like it is and create an override on the <code class=\"language-text\">Ext.app.Application</code> class. What this override will do is change the <code class=\"language-text\">launch</code> method so that we can check if the stores have loaded. When they have all loaded, then execute the original <code class=\"language-text\">launch</code> method.</p>\n<p>Let’s take a look at a <a href=\"https://fiddle.sencha.com\">Sencha Fiddle</a> as an example:</p>\n<iframe style=\"border:0;width:600px;height:600px;\" src=\"https://fiddle.sencha.com/fiddle/pq4\"></iframe>\n<p>Looking at the different files, we have the 3 stores defined. <code class=\"language-text\">Store1</code> and <code class=\"language-text\">Store3</code> have <code class=\"language-text\">autoLoad</code> set to <code class=\"language-text\">true</code> but <code class=\"language-text\">Store2</code> does not so we only need to wait for <code class=\"language-text\">Store1</code> and <code class=\"language-text\">Store3</code> to load.</p>\n<p>If you want, you can take a peak at <code class=\"language-text\">overrides/app/Application.js</code> to see how I take control of the <code class=\"language-text\">launch</code> method. Here’s a rundown. The <code class=\"language-text\">launch</code> method gets transformed in the cleverly named <code class=\"language-text\">transformLaunch</code> method into a function that checks if all stores are loaded. The other method that is important is the <code class=\"language-text\">isStoreLoaded</code> method, this is important because this tells the override if the store has loaded in order to add the <code class=\"language-text\">load</code> listener and to tell if all stores have loaded. You may need to add additional logic dependent on your application’s situation. If you need to modify that logic, I like to keep the override like it is and add that logic into my <code class=\"language-text\">app/Application.js</code> class so the logic is upfront in the app.</p>","fields":{"slug":"/2015/07/02/delaying-launch-for-stores-to-load/"},"frontmatter":{"title":"Delaying launch for stores to load","date":"July 02, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/07/02/delaying-launch-for-stores-to-load/","previous":{"fields":{"slug":"/2015/06/30/the-death-of-major-versions/"},"frontmatter":{"title":"The death of major versions?"}},"next":{"fields":{"slug":"/2015/07/02/handling-user-session-with-routes/"},"frontmatter":{"title":"Handling user session with routes"}}}}}