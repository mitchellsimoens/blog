{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2015/07/29/instances-on-prototype-are-bad/","webpackCompilationHash":"8bfc8b7fa9836efccfc8","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"2de5ee3c-8f31-5c8c-9968-a64718a24d90","excerpt":"I’ve been seeing something a lot lately and I wanted to take a quick second to talk about it. This is creating instances and placing them on the prototype and…","html":"<p>I’ve been seeing something a lot lately and I wanted to take a quick second to talk about it. This is creating instances and placing them on the prototype and all the issues this can cause and it may not be obvious to the developer. Let’s take a look at such a case:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.view.Main&#39;, {\n    extend : &#39;Ext.grid.Panel&#39;,\n    xtype  : &#39;myapp-main&#39;,\n\n    requires : [\n        &#39;MyApp.store.Foo&#39;,\n        &#39;MyApp.store.Bar&#39;\n    ],\n\n    store : Ext.create(&#39;MyApp.store.Foo&#39;),\n\n    columns : [\n        {\n            text      : &#39;Foo&#39;,\n            dataIndex : &#39;foo&#39;,\n            flex      : 1,\n            editor    : new Ext.form.field.ComboBox({\n                store : {\n                    type : &#39;myapp-bar&#39;\n                }\n            })\n        }\n    ]\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here, I am creating two store instances and placing them on the prototype; yes, this code does have missing bits to not have super long code. I use <code class=\"language-text\">Ext.create</code> to create an instance of the <code class=\"language-text\">MyApp.store.Foo</code> class and using the <code class=\"language-text\">new</code> keyword to create a <code class=\"language-text\">ComboBox</code> instance as the editor of a column and in the <code class=\"language-text\">ComboBox</code> I specify the store using a config object that will use the <code class=\"language-text\">MyApp.store.Bar</code> via it’s alias.</p>\n<p>Let’s first look at the <code class=\"language-text\">store : Ext.create(&#39;MyApp.store.Foo&#39;),</code> line and why it’s bad. Even though <code class=\"language-text\">MyApp.view.Main</code> is requiring <code class=\"language-text\">MyApp.store.Foo</code>, which is proper, the <code class=\"language-text\">Ext.create</code> call will be executed by the browser right away before anything else happens, even before the <code class=\"language-text\">MyApp.view.Main</code> class is defined. This is because the browser evaluates the code in that file when the file is downloaded, all prototype members are evaluated to create the object literal being passed into the <code class=\"language-text\">Ext.define</code> call. This means the <code class=\"language-text\">Ext.create</code> call will be executed before the requires is even required. Therefor <code class=\"language-text\">Ext.create</code> will then synchronously load the <code class=\"language-text\">MyApp.store.Foo</code> class and create an instance and place it on the <code class=\"language-text\">store</code> member of that object. This is bad for a couple reasons:</p>\n<ul>\n<li>The class is synchronously loaded and therefor affects startup performance</li>\n<li>You expect a new store class to be created for each <code class=\"language-text\">MyApp.view.Main</code> instance creation however all <code class=\"language-text\">MyApp.view.Main</code> instances will share the same <code class=\"language-text\">MyApp.store.Foo</code> store instance because the instance is set onto the prototype. This means if you sort/filter one instance, any and all other instances of <code class=\"language-text\">MyApp.view.Main</code> will reflect that sort/filter even if the instance of <code class=\"language-text\">MyApp.view.Main</code> is created later. It’s sharing the store instance.</li>\n</ul>\n<p>To fix this part of the code, it should be using a config object:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">store : {\n    type : &#39;myapp-foo&#39;\n    //xclass : &#39;MyApp.store.Foo&#39; //or using xclass\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This way, each time an instance of <code class=\"language-text\">MyApp.view.Main</code> is created, a new instance of <code class=\"language-text\">MyApp.store.Foo</code> is created. If you do want to share a store instance, I’d suggest adding the store to your application’s <code class=\"language-text\">stores</code> config and then setting the <code class=\"language-text\">store</code> config on <code class=\"language-text\">MyApp.view.Main</code> to the appropriate <code class=\"language-text\">storeId</code> your global store is given.</p>\n<p>Next, let’s look at the <code class=\"language-text\">ComboBox</code>. Let’s assume <code class=\"language-text\">Ext.form.field.ComboBox</code> has already been defined (otherwise you’d get a nice syntax error) the underlying issue is the same as with the <code class=\"language-text\">Ext.create</code> usage, the browser will try to create an instance of <code class=\"language-text\">Ext.form.field.ComboBox</code> which will then try to create an instance of the store before the <code class=\"language-text\">MyApp.view.Main</code> is ever defined which then means those two stores being required are not even requested to be required. You’ll then get a nice pretty error from Ext JS like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[Ext.createByAlias] Unrecognized alias: store.myapp-bar</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This error is basically saying the <code class=\"language-text\">MyApp.store.Bar</code> store has not been defined yet which is to be expected since the <code class=\"language-text\">ComboBox</code> is being instantiated before the store is ever required.</p>\n<p>To fix this part of the code, you simply use a config object for the <code class=\"language-text\">ComboBox</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">        columns : [\n        {\n            text      : &#39;Foo&#39;,\n            dataIndex : &#39;foo&#39;,\n            flex      : 1,\n            editor    : {\n                xtype  : &#39;combobox&#39;,\n                store  : {\n                    type : &#39;myapp-bar&#39;\n                }\n            }\n        }\n    ]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now, when the <code class=\"language-text\">MyApp.view.Main</code> is instantiated, when that <code class=\"language-text\">Foo</code> column is instantiated it will create an instance of the <code class=\"language-text\">ComboBox</code> properly.</p>\n<h3>Conclusion</h3>\n<p>I never create an instance and place it on the prototype. There are much better ways to have a global instance of something.</p>","fields":{"slug":"/2015/07/29/instances-on-prototype-are-bad/"},"frontmatter":{"title":"Instances on prototype are bad!","date":"July 29, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/07/29/instances-on-prototype-are-bad/","previous":{"fields":{"slug":"/2015/07/24/list-scrolldock-config/"},"frontmatter":{"title":"List and the scrollDock config"}},"next":{"fields":{"slug":"/2015/08/12/pluralize-text/"},"frontmatter":{"title":"Pluralize text"}}}}}