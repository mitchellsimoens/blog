{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/2015/03/23/use-of-a-base-url-in-a-utility-class/","webpackCompilationHash":"07a3df15061a891214b5","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"ff3ee6b5-3a57-5e38-8cba-b04957d0689d","excerpt":"I had an idea the other day and I’m not sure why I hadn’t thought of it sooner. For the longest time I’ve always advocated to have a singleton utility class…","html":"<p>I had an idea the other day and I’m not sure why I hadn’t thought of it sooner. For the longest time I’ve always advocated to have a singleton utility class that holds onto configs like a base url. Then in your store, you can get the base url and prepend it. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.Util&#39;, {\n    singleton : true,\n\n    config : {\n    \tbaseUrl : &#39;http://foo.com/&#39;\n    },\n\n    constructor : function(config) {\n    \tthis.initConfig(config);\n    }\n});\n\nExt.define(&#39;MyApp.store.Foo&#39;, {\n\textend : &#39;Ext.data.Store&#39;,\n    alias  : &#39;store.myapp-foo&#39;,\n\n    requires : [\n    \t&#39;MyApp.Util&#39;,\n        &#39;MyApp.model.Foo&#39;\n    ],\n\n    model : &#39;MyApp.model.Foo&#39;,\n\n    proxy : {\n    \ttype : &#39;ajax&#39;,\n        url  : MyApp.Util.getBaseUrl() + &#39;foo.json&#39;\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>When the <code class=\"language-text\">MyApp.store.Foo</code> class is loaded by the browser, that <code class=\"language-text\">MyApp.Util.getBaseUrl()</code> is automatically evaluated and if you had <code class=\"language-text\">MyApp.Util</code> loaded prior to the store being loaded, it will concat the <code class=\"language-text\">http://foo.com/</code> and <code class=\"language-text\">foo.json</code> and everything is good. The biggest drawback to this was that you had to require the <code class=\"language-text\">MyApp.Uti</code> class in both the <code class=\"language-text\">Ext.application</code> and the store’s <code class=\"language-text\">requires</code> array. (side note, Sencha Cmd may be able to detect <code class=\"language-text\">MyApp.Util</code> but I’ve seen where this falls down so I’m usually more explicit with my <code class=\"language-text\">requires</code> array) Also, in your code you have to spread the <code class=\"language-text\">MyApp.Util.getBaseUrl()</code> calls around everywhere.</p>\n<p>Instead, I had a thought to make this workflow much easier! What if you were able to define your store like this?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.store.Foo&#39;, {\n\textend : &#39;Ext.data.Store&#39;,\n    alias  : &#39;store.myapp-foo&#39;,\n\n    requires : [\n        &#39;MyApp.model.Foo&#39;\n    ],\n\n    model : &#39;MyApp.model.Foo&#39;,\n\n    proxy : {\n    \ttype : &#39;ajax&#39;,\n        url  : &#39;foo.json&#39;\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>No requiring <code class=\"language-text\">MyApp.Util</code>, no <code class=\"language-text\">MyApp.Util.getBaseUrl()</code> spread everywhere. Looks like I can solve both my caveats right? But how can I get the base url in there? Just by this code, there isn’t anything that will prepend it. Where’s the magic?</p>\n<p>The magic is all in the <code class=\"language-text\">MyApp.Util</code> class with a small change. <code class=\"language-text\">Ext.data.Connection</code> (<code class=\"language-text\">Ext.Ajax</code> is an instance off) will fire a <code class=\"language-text\">beforerequest</code> event allowing you to cancel the request or you can also modify the request by changing the params but you can also change the url of the request. So why not have <code class=\"language-text\">MyApp.Util</code> automatically prepend the baseUrl for us? Like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.Util&#39;, {\n  \tsingleton : true,\n\n  \tconfig : {\n      \tbaseUrl : &#39;http://foo.com/&#39;\n  \t},\n\n  \tconstructor : function(config) {\n      \tthis.initConfig(config);\n\n      \tExt.Ajax.on(&#39;beforerequest&#39;, this.onBeforeRequest, this);\n  \t},\n\n    onBeforeRequest : function(connection, options) {\n      \toptions.url = this.getBaseUrl() + options.url;\n  \t}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>  \t});</p>\n<p>All I did was add the <code class=\"language-text\">beforerequest</code> event listener, and then changed the <code class=\"language-text\">options.url</code> and it will automatically prepend the base url. Here it is in action:</p>\n<iframe src=\"https://fiddle.sencha.com/fiddle/k2p\" style=\"border: 0; width: 600px; height: 600px;\"></iframe>\n<p>Notice this will of course work with <code class=\"language-text\">Ext.Ajax.request</code> calls, this is what <code class=\"language-text\">Ext.data.proxy.Ajax</code> does under the hood anyway.</p>\n<p>There is always a better way to do things and always many different ways to do things. There are more performant ways to do this but I like this approach as it’s very logical to me in how it works. I can come back to this code in 2 years and easily pick up what I was doing.</p>","fields":{"slug":"/2015/03/23/use-of-a-base-url-in-a-utility-class/"},"frontmatter":{"title":"Use of a base url in a utility class","date":"March 23, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/03/23/use-of-a-base-url-in-a-utility-class/","previous":{"fields":{"slug":"/2015/03/09/tough-mudder-2015-gulf-coast/"},"frontmatter":{"title":"Tough Mudder 2015 - Gulf Coast"}},"next":{"fields":{"slug":"/2015/04/14/override-compatibility/"},"frontmatter":{"title":"Override Compatibility"}}}}}