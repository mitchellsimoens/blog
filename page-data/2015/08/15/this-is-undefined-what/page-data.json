{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2015/08/15/this-is-undefined-what/","webpackCompilationHash":"404118be10adc6e8f540","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"c44bb3b9-b004-573b-b2d2-762ea204c0bb","excerpt":"Playing around the other day with ES6 and classes and ran upon a strange error. It was simple code, a base class, a subclass and a constructor: This resulting…","html":"<p>Playing around the other day with ES6 and classes and ran upon a strange error. It was simple code, a base class, a subclass and a constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class Base {}\n\nclass Sub extends Base {\n    constructor(config) {\n        console.log(this);\n    };\n}\n\nnew Sub();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This resulting in a <code class=\"language-text\">ReferenceError</code> that <code class=\"language-text\">this</code> was <code class=\"language-text\">undefined</code>. This was, quite simply, the only time I’ve ever see <code class=\"language-text\">this</code> be <code class=\"language-text\">undefined</code>. I mean, even if I were to try to make it <code class=\"language-text\">undefined</code> I couldn’t:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">function Foo() {\n    console.log(this);\n}\n\nFoo.call(undefined);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Within <code class=\"language-text\">Foo</code>, <code class=\"language-text\">this</code> would be equal to <code class=\"language-text\">window</code>. So how can it ever be <code class=\"language-text\">undefined</code>? My first thought was that ES6 is very new and not fully implemented anywhere yet (Babel and Traceur are coming close to transpiling it though) and the browsers are definitely not close for real native development (see kangax’s <a href=\"https://kangax.github.io/compat-table/es6/\">chart</a>) so then it must just be a browser error. Since I know Babel is quite far along and they have a <a href=\"https://babeljs.io/repl/\">playground</a> that can run in the browser I threw the code in there and finally got an error that explains it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&#39;this&#39; is not allowed before super()</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>What a curious bug but trying it out this code does indeed work:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class Base {}\n\nclass Sub extends Base {\n    constructor(config) {\n        super(config);\n\n        console.log(this);\n    };\n}\n\nnew Sub();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So <code class=\"language-text\">this</code> can only be used after calling <code class=\"language-text\">super</code> huh? Why? And I don’t mean technically why but theoretically why? What if I wanted to do something before calling the superclass’ method and use <code class=\"language-text\">this</code>? So now a superclass has to take into account any subclasses. So if I wanted to do something, I guess I would have to execute a function in the superclass so that a subclass can enact on it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class Base {\n    constructor(config) {\n        if (this.doSomething) {\n            this.doSomething(config);\n        }\n    }\n}\n\nclass Sub extends Base {\n    constructor(config) {\n        super(config);\n\n        console.log(this);\n    };\n\n    doSomething(config) {\n        console.log(this);\n    }\n}\n\nnew Sub();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Yuck! I hope someone else has found a better way to use <code class=\"language-text\">this</code> in a subclass.</p>\n<p>Ok, so there’s a limitation there and as developers we can beat our heads against a brick wall (you can’t beat the interpreter) or you can develop around the limitation. I was just hoping, in a new spec in modern day, that I wouldn’t have such limitations. I come from a PHP background and have no problems like this. Currently use Ext JS and it’s class system and have no problems like this.</p>","fields":{"slug":"/2015/08/15/this-is-undefined-what/"},"frontmatter":{"title":"this is undefined, what?","date":"August 15, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/08/15/this-is-undefined-what/","previous":{"fields":{"slug":"/2015/08/13/format-your-numbers/"},"frontmatter":{"title":"Format your numbers!"}},"next":{"fields":{"slug":"/2015/08/26/react-dispatcher-improved/"},"frontmatter":{"title":"React dispatcher, improved"}}}}}