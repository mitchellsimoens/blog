{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/02/18/rootproperty-as-a-function/","webpackCompilationHash":"1f2b70db33523662b1d3","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"a0147c96-d41c-5cd8-90ab-8e36d3261120","excerpt":"When I design an endpoint to return some JSON data for consumption in a grid, I always nest the data in the  property so that I can provide a total count in…","html":"<p>When I design an endpoint to return some JSON data for consumption in a grid, I always nest the data in the <code class=\"language-text\">data</code> property so that I can provide a total count in order to support pagination. So most of my server side scripts are setup to nest data. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n    &quot;success&quot;: true,\n    &quot;total&quot;: 4375,\n    &quot;data&quot;: [...]\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I setup my store to read this via something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.view.Foo&#39;, {\n\textend : &#39;Ext.data.Store&#39;,\n\n    proxy : {\n    \ttype   : &#39;ajax&#39;,\n        url    : &#39;/foo&#39;,\n        reader : {\n        \trootProperty : &#39;data&#39;\n        }\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>However, when using <code class=\"language-text\">Ext.data.TreeStore</code>, it wants to use the same property to find the children of nodes. By default, it uses the <code class=\"language-text\">children</code> property and you can change this by using the <code class=\"language-text\">rootProperty</code> like we have above (there are a couple different ways really). So if you have your nodes nested within the <code class=\"language-text\">data</code> property but still use <code class=\"language-text\">children</code> to have your child nodes in, it won’t find any child nodes because you have two different roots, <code class=\"language-text\">data</code> and <code class=\"language-text\">children</code>.</p>\n<p>So how can we handle this use case? Well, first I’d say fix your server to not nest the data so that things will work great within Ext JS. But let’s be real for a second, the people in charge of your server-side code are likely a bit reluctant to change. You can buy them a steak dinner and they may still not change, you just have to deal with it.</p>\n<p>Don’t worry, Ext JS actually has a way to handle this. If you look at the <a href=\"http://docs.sencha.com/extjs/5.1/5.1.0-apidocs/#!/api/Ext.data.reader.Reader-cfg-rootProperty\">documentation</a> for the <code class=\"language-text\">rootProperty</code> config it says that it accepts a string for a value. Well, that’s not entirely true and the docs will get fixed to reflect this but the <code class=\"language-text\">rootProperty</code> can actually accept a function and you return child nodes from the data provided. Let’s look at some sample data:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">  {\n    &quot;data&quot; : [\n        {\n            &quot;text&quot;     : &quot;Foo&quot;,\n            &quot;expanded&quot; : true,\n            &quot;children&quot; : [\n                {\n                    &quot;text&quot; : &quot;Bar&quot;,\n                    &quot;leaf&quot; : true\n                }\n            ]\n        }\n    ]\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So we have our child nodes nested within the <code class=\"language-text\">data</code> property but we also use <code class=\"language-text\">children</code> to denote our child nodes. We can define out <code class=\"language-text\">rootProperty</code> to work with this like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">rootProperty : function(node) {\n\treturn node.data || node.children;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>With this it returns <code class=\"language-text\">node.data</code> if it’s truthy or it will return <code class=\"language-text\">node.children</code>. So if <code class=\"language-text\">data</code> exists, return it, else return <code class=\"language-text\">children</code>. It’s as easy as that! Here’s a live <a href=\"https://fiddle.sencha.com/#fiddle/iga\">fiddle</a>:</p>\n<iframe src=\"https://fiddle.sencha.com/fiddle/iga\" style=\"border: 0; width: 600px; height: 600px;\"></iframe>","fields":{"slug":"/2015/02/18/rootproperty-as-a-function/"},"frontmatter":{"title":"rootProperty as a function!","date":"February 18, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/02/18/rootproperty-as-a-function/","previous":{"fields":{"slug":"/2015/02/12/nodedomain-lesson-with-adobe-brackets/"},"frontmatter":{"title":"NodeDomain lesson with Adobe Brackets"}},"next":{"fields":{"slug":"/2015/03/09/tough-mudder-2015-gulf-coast/"},"frontmatter":{"title":"Tough Mudder 2015 - Gulf Coast"}}}}}