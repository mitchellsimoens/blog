{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/02/12/nodedomain-lesson-with-adobe-brackets/","webpackCompilationHash":"1f2b70db33523662b1d3","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"b69cf501-543c-5e4f-a3ef-5aee771f2803","excerpt":"I’ve been an IntelliJ IDEA user for 4 years now but I usually have most features turned off but it’s a memory hog, the constant indexing and overall sluggish…","html":"<p>I’ve been an <a href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA</a> user for 4 years now but I usually have most features turned off but it’s a memory hog, the constant indexing and overall sluggish performance has been annoying me for quite some time. I was turned onto <a href=\"http://brackets.io/\">Adobe Brackets</a> a couple weeks ago by Seth Lemmons (fellow Senchan). Right out of the gate, I knew it wasn’t going to be feature rich like IDEA which is good and bad. Overall, it does a pretty good job for me and after a couple existing extensions it’s better. There are a couple feature gaps between the two and since Brackets is really just a web app I can build extensions using JavaScript (not Java or Ruby like other editors/IDEs) which is a nice appeal.</p>\n<p>The first extension I’m building is <a href=\"http://www.sencha.com/products/sencha-cmd/\">Sencha Cmd</a> integration. I normally have my editor and <a href=\"http://iterm.sourceforge.net/\">iTerm</a> open at the same time. With iTerm I normally have a couple tabs open, one to start my node server and another to run builds with Cmd. So I wanted to be able to run a Cmd build within Brackets so that I don’t have to switch back to iTerm to run a build.</p>\n<p>Being my first extension, I had to look around at existing plugins that can execute commands such as <a href=\"https://github.com/johnhidey/hdy.brackets-shell\">hdy.brackets-shell</a> extension. I learned that I have to create a <a href=\"http://brackets.io/docs/current/modules/utils/NodeDomain.html\">NodeDomain</a> spec to be able to use Node.js’ <a href=\"http://nodejs.org/api/child_process.html\">child_process</a> module. This made me learn a bit of how Brackets work. It turns out that Brackets has a Node.js server running behind the scenes which you can communicate with via NodeDomain which uses <a href=\"http://brackets.io/docs/current/modules/utils/NodeConnection.html\">NodeConnection</a> (you can also have NodeConnection create the NodeDomain so you can go at it either way). NodeConnection then uses websockets to communicate from the client web app that you interact with and the Node.js server. I got a basic setup working but I was beating my head against my desk wondering why when I make a change to my NodeDomain spec that I wasn’t seeing it applied when I would reload Brackets with extensions (cmd + r keyboard shortcut on Mac). Turns out when you reload Brackets, you are only really reloading the client web app, not the Node.js server which needs to happen to make your NodeDomain spec changes take affect.</p>\n<p>So the solution is to either quit Brackets and start it back up or you can restart Node via the Debug -> Restart Node menu item. I wish there was an option to reload Brackets and restart Node with a single menu item. Guess a new extension for this is on my list.</p>","fields":{"slug":"/2015/02/12/nodedomain-lesson-with-adobe-brackets/"},"frontmatter":{"title":"NodeDomain lesson with Adobe Brackets","date":"February 12, 2015"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2015/02/12/nodedomain-lesson-with-adobe-brackets/","previous":{"fields":{"slug":"/2015/02/11/project-managing-personal-finances/"},"frontmatter":{"title":"Project Managing Personal Finances"}},"next":{"fields":{"slug":"/2015/02/18/rootproperty-as-a-function/"},"frontmatter":{"title":"rootProperty as a function!"}}}}}