{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2012/02/04/actioncolumn-and-mvc/","webpackCompilationHash":"7a2b55a2d04ca1da1bf3","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"232ff8fc-64b5-5d66-ac76-c28dbd0b0ee1","excerpt":"Being full-time on the Sencha forums gives me direct access to the community which gives me an idea of some frequently asked questions that I hope to blog more…","html":"<p>Being full-time on the <a href=\"http://www.sencha.com/forums/\" title=\"Sencha forums\" target=\"_blank\">Sencha forums</a> gives me direct access to the community which gives me an idea of some frequently asked questions that I hope to blog more to answer.</p>\n<h2>Mission</h2>\n<p>Building applications with Ext JS 4 is very easy with the MVC architecture but sometimes it’s not always easy to know how to use MVC with certain widgets or features of Ext JS 4. Today I would like to discuss how I went about using ActionColumns and MVC specifically how to control when you click on an ActionColumn item within a controller.</p>\n<h2>Setting the Stage</h2>\n<p>Let’s set the stage! I’m going to use the Array Grid example that comes with every Ext JS release but turn it from an ordinary example into a more MVC example. Here are the controller, model, view and application code that we can start with:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;Mitch.controller.Main&#39;, {\n    extend : &#39;Ext.app.Controller&#39;,\n\n    init : function() {\n        //this.control will go here\n    }\n});\n\nExt.define(&#39;Mitch.model.Company&#39;, {\n    extend : &#39;Ext.data.Model&#39;,\n\n    idProperty : &#39;company&#39;,\n    fields     : [\n       { name : &#39;company&#39;                                            },\n       { name : &#39;price&#39;,      type : &#39;float&#39;                         },\n       { name : &#39;change&#39;,     type : &#39;float&#39;                         },\n       { name : &#39;pctChange&#39;,  type : &#39;float&#39;                         },\n       { name : &#39;lastChange&#39;, type : &#39;date&#39;, dateFormat : &#39;n/j h:ia&#39; }\n    ]\n});\n\nExt.define(&#39;Mitch.view.Viewport&#39;, {\n    extend : &#39;Ext.grid.Panel&#39;,\n    xtype  : &#39;mitch-viewport&#39;,\n\n    multiSelect : true,\n    height      : 350,\n    width       : 600,\n    title       : &#39;Array Grid&#39;,\n\n    initComponent : function() {\n        var me = this;\n\n        me.columns    = me.buildColumns();\n        me.store      = me.buildStore();\n        me.viewConfig = {\n            stripeRows          : true,\n            enableTextSelection : true\n        };\n\n        Mitch.view.Viewport.superclass.initComponent.call(me);\n    },\n\n    buildStore : function() {\n        return new Ext.data.Store({\n            model : &#39;Mitch.model.Company&#39;,\n            data  : [\n                [&#39;3m Co&#39;,                               71.72, 0.02,  0.03,  &#39;9/1 12:00am&#39;],\n                [&#39;Alcoa Inc&#39;,                           29.01, 0.42,  1.47,  &#39;9/1 12:00am&#39;],\n                [&#39;Altria Group Inc&#39;,                    83.81, 0.28,  0.34,  &#39;9/1 12:00am&#39;],\n                [&#39;American Express Company&#39;,            52.55, 0.01,  0.02,  &#39;9/1 12:00am&#39;],\n                [&#39;American International Group, Inc.&#39;,  64.13, 0.31,  0.49,  &#39;9/1 12:00am&#39;],\n                [&#39;AT&amp;amp;T Inc.&#39;,                           31.61, -0.48, -1.54, &#39;9/1 12:00am&#39;],\n                [&#39;Boeing Co.&#39;,                          75.43, 0.53,  0.71,  &#39;9/1 12:00am&#39;],\n                [&#39;Caterpillar Inc.&#39;,                    67.27, 0.92,  1.39,  &#39;9/1 12:00am&#39;],\n                [&#39;Citigroup, Inc.&#39;,                     49.37, 0.02,  0.04,  &#39;9/1 12:00am&#39;],\n                [&#39;E.I. du Pont de Nemours and Company&#39;, 40.48, 0.51,  1.28,  &#39;9/1 12:00am&#39;],\n                [&#39;Exxon Mobil Corp&#39;,                    68.1,  -0.43, -0.64, &#39;9/1 12:00am&#39;],\n                [&#39;General Electric Company&#39;,            34.14, -0.08, -0.23, &#39;9/1 12:00am&#39;],\n                [&#39;General Motors Corporation&#39;,          30.27, 1.09,  3.74,  &#39;9/1 12:00am&#39;],\n                [&#39;Hewlett-Packard Co.&#39;,                 36.53, -0.03, -0.08, &#39;9/1 12:00am&#39;],\n                [&#39;Honeywell Intl Inc&#39;,                  38.77, 0.05,  0.13,  &#39;9/1 12:00am&#39;],\n                [&#39;Intel Corporation&#39;,                   19.88, 0.31,  1.58,  &#39;9/1 12:00am&#39;],\n                [&#39;International Business Machines&#39;,     81.41, 0.44,  0.54,  &#39;9/1 12:00am&#39;],\n                [&#39;Johnson &amp;amp; Johnson&#39;,                   64.72, 0.06,  0.09,  &#39;9/1 12:00am&#39;],\n                [&#39;JP Morgan &amp;amp; Chase &amp;amp; Co&#39;,              45.73, 0.07,  0.15,  &#39;9/1 12:00am&#39;],\n                [&#39;McDonald\\&#39;s Corporation&#39;,             36.76, 0.86,  2.40,  &#39;9/1 12:00am&#39;],\n                [&#39;Merck &amp;amp; Co., Inc.&#39;,                   40.96, 0.41,  1.01,  &#39;9/1 12:00am&#39;],\n                [&#39;Microsoft Corporation&#39;,               25.84, 0.14,  0.54,  &#39;9/1 12:00am&#39;],\n                [&#39;Pfizer Inc&#39;,                          27.96, 0.4,   1.45,  &#39;9/1 12:00am&#39;],\n                [&#39;The Coca-Cola Company&#39;,               45.07, 0.26,  0.58,  &#39;9/1 12:00am&#39;],\n                [&#39;The Home Depot, Inc.&#39;,                34.64, 0.35,  1.02,  &#39;9/1 12:00am&#39;],\n                [&#39;The Procter &amp;amp; Gamble Company&#39;,        61.91, 0.01,  0.02,  &#39;9/1 12:00am&#39;],\n                [&#39;United Technologies Corporation&#39;,     63.26, 0.55,  0.88,  &#39;9/1 12:00am&#39;],\n                [&#39;Verizon Communications&#39;,              35.57, 0.39,  1.11,  &#39;9/1 12:00am&#39;],\n                [&#39;Wal-Mart Stores, Inc.&#39;,               45.45, 0.73,  1.63,  &#39;9/1 12:00am&#39;]\n            ]\n        });\n    },\n\n    buildColumns : function() {\n        return [\n            {\n                text      : &#39;Company&#39;,\n                flex      : 1,\n                sortable  : false,\n                dataIndex : &#39;company&#39;\n            },\n            {\n                text      : &#39;Price&#39;,\n                width     : 75,\n                sortable  : true,\n                renderer  : &#39;usMoney&#39;,\n                dataIndex : &#39;price&#39;\n            },\n            {\n                text      : &#39;Change&#39;,\n                width     : 75,\n                sortable  : true,\n                renderer  : &#39;usMoney&#39;,\n                dataIndex : &#39;change&#39;\n            },\n            {\n                text      : &#39;% Change&#39;,\n                width     : 75,\n                sortable  : true,\n                renderer  : function(v) { return v + &#39;%&#39;; },\n                dataIndex : &#39;pctChange&#39;\n            },\n            {\n                text      : &#39;Last Updated&#39;,\n                width     : 85,\n                sortable  : true,\n                renderer  : Ext.util.Format.dateRenderer(&#39;m/d/Y&#39;),\n                dataIndex : &#39;lastChange&#39;\n            },\n            {\n                xtype        : &#39;actioncolumn&#39;,\n                menuDisabled : true,\n                sortable     : false,\n                width        : 50,\n                items        : [\n                    {\n                        icon    : &#39;../SDK/extjs/examples/shared/icons/fam/delete.gif&#39;,\n                        tooltip : &#39;Sell stock&#39;,\n                        handler : function(grid, rowIndex, colIndex) {\n                            var rec = store.getAt(rowIndex);\n                            alert(&#39;Sell &#39; + rec.get(&#39;company&#39;));\n                        }\n                    },\n                    {\n                        getClass : function(v, meta, rec) {\n                            if (rec.get(&#39;change&#39;) &lt; 0) {\n                                this.items[1].tooltip = &#39;Hold stock&#39;;\n                                return &#39;alert-col&#39;;\n                            } else {\n                                this.items[1].tooltip = &#39;Buy stock&#39;;\n                                return &#39;buy-col&#39;;\n                            }\n                        },\n                        handler  : function(grid, rowIndex, colIndex) {\n                            var rec = grid.getStore().getAt(rowIndex);\n                            alert((rec.get(&#39;change&#39;) &lt; 0 ? &#39;Hold &#39; : &#39;Buy &#39;) + rec.get(&#39;company&#39;));\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n});\n\nExt.application({\n    name        : &#39;Mitch&#39;,\n    controllers : [ &#39;Main&#39; ],\n\n    launch : function() {\n        new Mitch.view.Viewport({\n            renderTo : document.body\n        });\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Bunch of code but very easy to follow. Currently the Main controller doesn’t do anything and you can see we have two items under the ActionColumn but it’s not very MVCish. I know you can use the ComponentQuery ‘mitch-viewport actioncolumn’ to resolve the ActionColumn so in the Main controller I just decided to test if I can listen to the a click event on the ActionColumn in a controller and it actually worked! Here is how to capture the click event:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;Mitch.controller.Main&#39;, {\n    extend : &#39;Ext.app.Controller&#39;,\n\n    init : function() {\n        this.control({\n            &#39;mitch-viewport actioncolumn&#39; : {\n                click : this.handleActionColumn\n            }\n        });\n    },\n\n    handleActionColumn : function(gridview, el, rowIndex, colIndex, e, rec, rowEl) {\n        console.log(arguments);\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So if you click on an item in the ActionColumn the controller will console.log the arguments out so you can inspect them. You could actually stop here and use this as is but upon inspecting the different arguments (there are quite a few) I saw a problem… there isn’t an easy way to distinguish which icon in the ActionColumn was actually clicked on. You could add some logic in to look look at the actual target to see which icon was clicked on but there is an easier and less expensive way than parsing the DOM.</p>\n<h2>Custom Events</h2>\n<p>I would hope we all know that you don’t have to stick with the default events that are fired within the framework, we can actually fire custom events using fireEvent but I know I didn’t have that thought when I first started off. So why not use fireEvent within the handler of each item in the ActionColumn so that we don’t have to dig into the DOM? Why have a catch-all click event that is on the column? We can have a general event that is fired but easily distinguishable from one another and name it ‘itemclick’!</p>\n<h2>Fire <code class=\"language-text\">itemclick</code></h2>\n<p>So we chose to fire a custom event call ‘itemclick’, first we need to decide what kind of arguments we want to fire this event with. The scope of the handler is that of the ActionColumn which is where we are going to fire the event on. We would maybe want the ActionColumn, grid, rowIndex, colIndex, record, eventObject, the node clicked on and since we are firing the event, we can make it easy on ourselves and put a custom argument to tell the action we should take. Let’s look at the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n    xtype        : &#39;actioncolumn&#39;,\n    menuDisabled : true,\n    sortable     : false,\n    width        : 50,\n    items        : [\n        {\n            icon    : &#39;../SDK/extjs/examples/shared/icons/fam/delete.gif&#39;,\n            tooltip : &#39;Sell stock&#39;,\n            handler : function(grid, rowIndex, colIndex, node, e, record, rowNode) {\n                this.fireEvent(&#39;itemclick&#39;, this, &#39;sell&#39;, grid, rowIndex, colIndex, record, node);\n            }\n        },\n        {\n            getClass : function(v, meta, rec) { /* */\n            },\n            handler  : function(grid, rowIndex, colIndex, node, e, record, rowNode) {\n                var action = record.get(&#39;change&#39;) &amp;lt; 0 ? &#39;hold&#39; : &#39;buy&#39;;\n                this.fireEvent(&#39;itemclick&#39;, this, action, grid, rowIndex, colIndex, record, node);\n            }\n        }\n    ]\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So you can see how we can use the fireEvent and fired the ‘itemclick’ event onto this which is the ActionColumn. Now we can update the Main controller like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;Mitch.controller.Main&#39;, {\n    extend : &#39;Ext.app.Controller&#39;,\n\n    init : function() {\n        this.control({\n            &#39;mitch-viewport actioncolumn&#39; : {\n                itemclick : this.handleActionColumn\n            }\n        });\n    },\n\n    handleActionColumn : function(column, action, grid, rowIndex, colIndex, record, node) {\n        console.log(action);\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If you update the view and the controller now and click on an icon in the ActionColumn, you would see the action console.log into the developer tools console being one of these options: ‘sell’, ‘hold’ or ‘buy’. Now based on that action we can then do whatever application and business logic that is required. Since we have the power of firing our own event you could actually fire the event on the grid itself so that your control method in your controller is easily managable and not have too many different ComponentQuery selectors but I would prefix the ‘itemclick’ event with ‘action’ so that the event name means something and doesn’t collide with any existing events.</p>\n<h2>Recap</h2>\n<p>First we took the Array Grid example and turned it into a simple MVC application. We then tested to see what events fire on the ActionColumn that we could use and found the click event was fired on the ActionColumn even though that particular event is documented in the API docs (I looked at the source for the ActionColumn and saw the possibility, don’t be afraid to look at the source!). We inspected the arguments that are fired with the click event and saw that we could use it but would have to query the DOM to see which item in the ActionColumn was actually clicked on. We decided that there could be a less expensive way to accomplish what we wanted to do than to play with the DOM as doing anything with the DOM (read/write) has a high performance hit. We found out we can fire our own events which should be faster than the DOM and so we modified our code to do this and found out it was very simple to do! Now we can go forth and do actual actions with our custom ‘itemclick’ event!</p>","fields":{"slug":"/2012/02/04/actioncolumn-and-mvc/"},"frontmatter":{"title":"ActionColumn and MVC","date":"February 04, 2012"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/02/04/actioncolumn-and-mvc/","previous":{"fields":{"slug":"/2011/12/27/ext-define-and-listeners-as-a-property-bad/"},"frontmatter":{"title":"Ext.define and listeners as a property... bad!"}},"next":{"fields":{"slug":"/2012/02/10/fullscreen-madness/"},"frontmatter":{"title":"Fullscreen Madness!"}}}}}