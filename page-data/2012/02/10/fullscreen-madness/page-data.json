{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2012/02/10/fullscreen-madness/","webpackCompilationHash":"6c41cf4b3649ceebc887","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"84082bce-0106-54ca-9156-b7df8ed50cd2","excerpt":"Sencha Touch 2 is a fantastic framework, my favorite to work with and most likely will be until Sencha Touch 3 comes out (no public dates yet :) ). I’m a mobile…","html":"<p>Sencha Touch 2 is a fantastic framework, my favorite to work with and most likely will be until Sencha Touch 3 comes out (no public dates yet :) ). I’m a mobile developer at heart I guess or maybe I just like that I don’t have to worry about IE. Either case Sencha Touch 2 is fantastic and by looking at the popularity in the <a href=\"http://www.sencha.com/forum/forumdisplay.php?89-Sencha-Touch-2.x-Forums\">Sencha Touch 2 forums</a> I’m not the only one loving it! Helping people out a lot, I’m noticing a lot of people using the <code class=\"language-text\">fullscreen</code> config option where they shouldn’t which makes me think that the function of the <code class=\"language-text\">fullscreen</code> config isn’t explained very well. Today, I hope to change this.</p>\n<h2><code class=\"language-text\">Ext.Viewport</code></h2>\n<p>Before we dive into what the <code class=\"language-text\">fullscreen</code> config does, I want to make you aware of a critical piece of the puzzle. When you launch a Sencha Touch 2 app, the framework creates a component that will act as the viewport for your app. The instance is saved to <code class=\"language-text\">Ext.Viewport</code>. Quick explanation of what <code class=\"language-text\">Ext.Viewport</code> is is it’s an <code class=\"language-text\">Ext.Container</code> using card layout. Bit more info is you may have noticed the classes in the <code class=\"language-text\">Ext.viewport</code> namespace (remember JavaScript is case-sensitive so <code class=\"language-text\">Ext.Viewport</code> !== <code class=\"language-text\">Ext.viewport</code>). <code class=\"language-text\">Ext.viewport.Android</code> and <code class=\"language-text\">Ext.viewport.Ios</code> both extend <code class=\"language-text\">Ext.viewport.Default</code> and help setup the viewport based on what platform is currently viewing your application. <code class=\"language-text\">Ext.viewport.Viewport</code> acts as a factory for creating the correct viewport class. Each platform has it’s own quirks and issues and this helps navigate around these to provide better performance.</p>\n<p>You can configure the <code class=\"language-text\">Ext.Viewport</code> by using the viewport config in <a href=\"http://docs.sencha.com/touch/2-0/#!/api/Ext-method-setup\"><code class=\"language-text\">Ext.setup</code></a> or the viewport config in <a href=\"http://docs.sencha.com/touch/2-0/#!/api/Ext-method-application\"><code class=\"language-text\">Ext.application</code></a>. Each link links to the online API Docs and there are examples for this so I don’t have to show that code.</p>\n<p>To sum <code class=\"language-text\">Ext.Viewport</code> up… <code class=\"language-text\">Ext.Viewport</code> is an <code class=\"language-text\">Ext.Container</code> and by default it uses card layout.</p>\n<h2><code class=\"language-text\">fullscreen</code> Config!</h2>\n<p>First, let’s look at a small code snippet and then break it down:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">new Ext.Container({\n    fullscreen : true,\n    html       : &#39;Do you seem my size?&#39;,\n    items      : [\n        {\n            xtype  : &#39;toolbar&#39;,\n            docked : &#39;top&#39;,\n            title  : &#39;Top Toolbar&#39;\n        },\n        {\n            xtype  : &#39;toolbar&#39;,\n            docked : &#39;bottom&#39;,\n            title  : &#39;Bottom Toolbar&#39;\n        }\n    ]\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I added the two toolbars so you can visually see the size of the <code class=\"language-text\">Ext.Container</code> we created. The important part we need to talk about is that <code class=\"language-text\">fullscreen</code> config. So you noticed that the <code class=\"language-text\">Ext.Container</code> took 100% of the height and width but how did it do that? Remember <code class=\"language-text\">Ext.Viewport</code>? When you create a component (using the <code class=\"language-text\">new</code> keyword like I did or <code class=\"language-text\">Ext.create</code>) with the <code class=\"language-text\">fullscreen</code> config set to <code class=\"language-text\">true</code> (defaults to <code class=\"language-text\">false</code>) it actually fires a <code class=\"language-text\">fullscreen</code> event on itself. Within <code class=\"language-text\">Ext.viewport.Default</code>, it has a listener for <code class=\"language-text\">fullscreen</code> events and when it captures one, it will take that component and add it as an item of <code class=\"language-text\">Ext.Viewport</code>. Since by default <code class=\"language-text\">Ext.Viewport</code> uses card layout the <code class=\"language-text\">Ext.Container</code> that was just added as an item will take up 100% of the height and width because that’s what card layout does.</p>\n<p>To recap this, <code class=\"language-text\">Ext.Viewport</code> listens for <code class=\"language-text\">fullscreen</code> events and adds that <code class=\"language-text\">Ext.Component</code> as an item.</p>\n<h2>Multiple <code class=\"language-text\">fullscreen</code>s</h2>\n<p>What happens when we have two or more components using <code class=\"language-text\">fullscreen</code> set to <code class=\"language-text\">true</code>? Well, it keeps adding those components and adds them as a child item but you will only be able to see one at a time as that is how card layout works. You can use the <code class=\"language-text\">setActiveItem</code> method on <code class=\"language-text\">Ext.Viewport</code> to navigate through your “fullscreen” components:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">new Ext.Container({\n    fullscreen : true,\n    html       : &#39;Do you seem my size?&#39;,\n    items      : [\n        {\n            xtype  : &#39;toolbar&#39;,\n            docked : &#39;top&#39;,\n            title  : &#39;Top Toolbar&#39;,\n            items  : [\n                {\n                    text    : &#39;Go 2nd&#39;,\n                    ui      : &#39;confirm&#39;,\n                    handler : function() {\n                        Ext.Viewport.setActiveItem(1);\n                    }\n                }\n            ]\n        },\n        {\n            xtype  : &#39;toolbar&#39;,\n            docked : &#39;bottom&#39;,\n            title  : &#39;Bottom Toolbar&#39;\n        }\n    ]\n});\n\nnew Ext.Container({\n    fullscreen : true,\n    html       : &#39;Second One&#39;\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So we have two <code class=\"language-text\">Ext.Containers</code> using <code class=\"language-text\">fullscreen</code> set to <code class=\"language-text\">true</code>. The active item will be the first container as <code class=\"language-text\">Ext.Viewport</code> won’t change the active item, it will just add it as an item. I added a button to the top toolbar of the first container that simple executes <code class=\"language-text\">Ext.Viewport.setActiveItem(1)</code> which will switch to the item at index 1 of <code class=\"language-text\">Ext.Viewport</code> which is the second container.</p>\n<h2>Summary</h2>\n<p>We quickly learned what <code class=\"language-text\">Ext.Viewport</code> is and how to configure it. We then dove into how the <code class=\"language-text\">fullscreen</code> config works behind the scenes and then saw how we can use multiple items with the <code class=\"language-text\">fullscreen</code> config set to <code class=\"language-text\">true</code>.</p>","fields":{"readingTime":{"text":"4 min read"},"slug":"/2012/02/10/fullscreen-madness/"},"frontmatter":{"title":"Fullscreen Madness!","date":"February 10, 2012"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/02/10/fullscreen-madness/","previous":{"fields":{"slug":"/2012/02/04/actioncolumn-and-mvc/"},"frontmatter":{"title":"ActionColumn and MVC"}},"next":{"fields":{"slug":"/2012/04/04/friends-and-life/"},"frontmatter":{"title":"Friends and life"}}}}}