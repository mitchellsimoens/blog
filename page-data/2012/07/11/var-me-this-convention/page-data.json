{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2012/07/11/var-me-this-convention/","webpackCompilationHash":"8bfc8b7fa9836efccfc8","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"14d2a6a3-96e7-5337-8c47-d6f5faa3484a","excerpt":"Once in a while the topic of using the  convention is brought up. Some people love it, some people hate it and some people don’t understand it. Usually the…","html":"<p>Once in a while the topic of using the <code class=\"language-text\">var me = this;</code> convention is brought up. Some people love it, some people hate it and some people don’t understand it. Usually the people who love it or hate it understand the convention (or may not fully understand it) but there seems to be quite a few people who do not understand it. I use the variable me as an example but you could name it anything and it won’t change it, even to the beloved <code class=\"language-text\">var that = this;</code> and what I will say will still hold true. The decision on whether to use <code class=\"language-text\">var me = this;</code> is purely for minification and therefore saving bytes. However, it could also cost you bytes if you don’t realize what you are doing or maybe think you will need to use it when you start coding and don’t go back to clean your code up. Let’s start experimenting!</p>\n<h2>Control</h2>\n<p>Let’s look at a control method that you may have somewhere in your code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">saveSomething : function(foo, status, scope) {\n    this.foo = foo;\n\n    this.myObj = {\n        mitch : status\n    };\n\n    this.onSave.call(scope);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If we look at this, we use <code class=\"language-text\">this</code> 4 times. All looks great so far! We have a method that saves the first two arguments and then calls a method.</p>\n<h2>New Feature!</h2>\n<p>So our control <code class=\"language-text\">saveSomething</code> method has been working quite well but we realize that we should do some error checking, we can make the <code class=\"language-text\">scope</code> argument optional and we decide we need to pass a method in the <code class=\"language-text\">onSave</code> method call. Let’s look at an example of how we can do it and then circle back to see if we can do a little better:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">saveSomething : function(foo, status, scope) {\n    var myObj = this.myObj;\n\n    scope = scope || this;\n\n    if (!myObj) {\n        myObj = this.myObj = {};\n    }\n\n    this.foo = foo;\n\n    myObj.mitch = status;\n\n    this.onSave.call(scope, this.saveSomethingCallback);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So here we created a variable <code class=\"language-text\">myObj</code> to equate to <code class=\"language-text\">this.myObj</code>. However, <code class=\"language-text\">this.myObj</code> may be undefined so we added an <code class=\"language-text\">if</code> statement to check and if it is undefined (or falsey) set the <code class=\"language-text\">myObj</code> variable and <code class=\"language-text\">this.myObj</code> property to an Object. Also, we made <code class=\"language-text\">scope</code> default to <code class=\"language-text\">this</code> with the <code class=\"language-text\">scope = scope || this;</code> so if the <code class=\"language-text\">scope</code> argument is undefined (or falsey) it will then equate to <code class=\"language-text\">this</code> making it an optional argument (IMO a little more robust). Lastly we pass the <code class=\"language-text\">saveSomethingCallback</code> method in the <code class=\"language-text\">onSave</code> call as an argument to be executed later in our code.</p>\n<h2>Minification</h2>\n<p>So now we have a little better of a method but it can get better! When we deploy our code we should always minify our code so it’s as small as can be reducing what the client has to download but still maintain code functionality. This does many things but what I want to talk about is how it minifies variables. This small example:</p>\n<p>  var foo = ‘bar’;</p>\n<p>can get minified to</p>\n<p>  var a=‘bar’;</p>\n<p>which saves 4 bytes as <code class=\"language-text\">foo</code> got renamed to <code class=\"language-text\">a</code> and the spaces before and after the equal sign got trimmed. Thinking back to our <code class=\"language-text\">saveSomething</code> method we can think that <code class=\"language-text\">this</code> will get minified to something like <code class=\"language-text\">a</code> just like the foo variable got renamed. Unfortunately, <code class=\"language-text\">this</code> (and other JavaScript keywords like <code class=\"language-text\">delete</code> or <code class=\"language-text\">new</code>) will not get minified. To combat this, we can create a variable to cache this and that variable can then get minified. This is where the <code class=\"language-text\">var me = this;</code> convention comes into play as we are going to cache <code class=\"language-text\">this</code> to the <code class=\"language-text\">me</code> variable and <code class=\"language-text\">me</code> will get minified:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">saveSomething : function (foo, status, scope) {\n    var me    = this,\n        myObj = me.myObj;\n\n    scope = scope || me;\n\n    if (!myObj) {\n        myObj = me.myObj = {};\n    }\n\n    me.foo = foo;\n\n    myObj.mitch = status;\n\n    me.onSave.call(scope, me.saveSomethingCallback);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We put the <code class=\"language-text\">me = this</code> in the variable block at the beginning of the method and replaced all <code class=\"language-text\">this</code> instances with <code class=\"language-text\">me</code>. We can now minify it and save 3 bytes per <code class=\"language-text\">this</code> instance for a total of 18 bytes (<code class=\"language-text\">this</code> was used 6 times in the <code class=\"language-text\">saveSomething</code> method before we applied the <code class=\"language-text\">me = this</code> convention and 6 x 3 = 18). However <code class=\"language-text\">me = this</code> also costs us some bytes, in fact in this example it cost us 8 bytes not including the spaces between <code class=\"language-text\">me</code> and <code class=\"language-text\">this</code> as they will get trimmed when it’s minified. So in total we saved 10 bytes after the <code class=\"language-text\">var me = this</code> convention which doesn’t account for much but if you have a sizable app it can add up and if you ask me, every bit saved counts.</p>\n<h2>Trouble!</h2>\n<p>This convention doesn’t come without a dark side. Applying this convention without counting the bytes that the <code class=\"language-text\">me = this</code> takes up and what you will save after minification will cost you bytes. If we go way back to the first <code class=\"language-text\">saveSomething</code> method and applied the <code class=\"language-text\">var me = this;</code> convention we will have costed some bytes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">saveSomething : function(foo, status, scope) {\n    var me = this;\n\n    me.foo = foo;\n\n    me.myObj = {\n        mitch : status\n    };\n\n    me.onSave.call(scope);\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">var me = this;</code> would cost us 11 bytes (it would be <code class=\"language-text\">var a=this;</code> after minification). For every instance of <code class=\"language-text\">this</code> we replaced we save 3 bytes and we had 3 instances so we save 9 bytes but the <code class=\"language-text\">me</code> variable line cost us 11 so we saved -2 bytes which is bad. We are trying to save bytes not add them.</p>\n<h2>Two Types</h2>\n<p>In these examples you saw the <code class=\"language-text\">me</code> variable get created by itself and in a variable block. If you have <code class=\"language-text\">me = this</code> in a variable block where there are other variables it costs less as we don’t have to add the <code class=\"language-text\">var</code> keyword. Let’s look at the byte cost:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">var me = this;\nvar a=this; //minified</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>The minified version costs 11 bytes so you would have to use this 4 or more times to save bytes in the long run.</p>\n<p>  var me  = this,\nfoo = ‘bar’;\nvar a=this,b=‘bar’; //minified</p>\n<p>a=this, costs 7 bytes so you would have to use this 3 or more times to save bytes in the long run.</p>\n<h2>Review</h2>\n<p>Using the <code class=\"language-text\">var me = this;</code> convention is purely to save some byte because <code class=\"language-text\">this</code> cannot be minified but <code class=\"language-text\">me</code> can. The savings won’t be drastic but every little bit helps but you have to be cautious as it could cost you bytes. If you ask me, this is a code style issue also and code style (quality) should be just as high of a priority as what your code is doing. I take my code style very seriously so lining colons and equal signs up and also applying <code class=\"language-text\">me = this</code> wherever it will save a byte is very important to me.</p>\n<p>A downside to this, which is just a visual annoyance, is in your IDE you probably have syntax highlighting and keywords usually get a blue (or other color depending ont he IDE) highlight but <code class=\"language-text\">me</code> will not so you can’t easily visually see the scope. My eyes simply have been trained to see me easily but I do miss seeing <code class=\"language-text\">this</code> highlighted. The syntax highlighting in the above examples show this.</p>\n<p>Results may vary.</p>","fields":{"slug":"/2012/07/11/var-me-this-convention/"},"frontmatter":{"title":"var me = this; convention","date":"July 11, 2012"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/07/11/var-me-this-convention/","previous":{"fields":{"slug":"/2012/06/19/build-configs-using-sencha-command/"},"frontmatter":{"title":"Build configs using Sencha Command"}},"next":{"fields":{"slug":"/2012/07/15/going-remote-with-sencha-command/"},"frontmatter":{"title":"Going Remote with Sencha Command"}}}}}