{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2012/07/15/going-remote-with-sencha-command/","webpackCompilationHash":"7a2b55a2d04ca1da1bf3","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"f2b718ab-6ec6-535a-b2f3-0f68eafa98c8","excerpt":"With the introduction of Sencha Touch 2.0.0 GA we got the use of Sencha Command which allows developers to create an app and build an app. Well, not as simple…","html":"<p>With the introduction of Sencha Touch 2.0.0 GA we got the use of Sencha Command which allows developers to create an app and build an app. Well, not as simple as that as there is more to it than simply creating and building but that’s for another blog post maybe. One thing that I try to emphasize is that you not edit <code class=\"language-text\">index.html</code>. The only exception to my rule is to edit the CSS and HTML for the loading screen but nothing else! No adding <code class=\"language-text\">&amp;#60;link&amp;#62;</code> elements, <code class=\"language-text\">&amp;#60;script&amp;#62;</code> elements, nothing! Of course your application may require it but try not to do it.</p>\n<h2><code class=\"language-text\">app.json</code></h2>\n<p><code class=\"language-text\">app.json</code> is the configuration file that the builder and microloader uses to know really how to work and what to load. What to load, like CSS and JavaScript files? Exactly! There are both <code class=\"language-text\">js</code> and <code class=\"language-text\">css</code> properties that tell the builder to copy over to the <code class=\"language-text\">build</code> folder and setup the microloader to load and possibly save to <code class=\"language-text\">localStorage</code>. However, there is a flaw with this and is noted in the comment above the <code class=\"language-text\">js</code> and <code class=\"language-text\">css</code> properties that the path must be relative to the <code class=\"language-text\">app.json</code> file. Many apps require the loading of remote sources and one of the more popular ones is the Google Maps API. To load a Google Map you must have a <code class=\"language-text\">&amp;#60;script&amp;#62;</code> element to load the API but you shouldn’t edit <code class=\"language-text\">index.html</code> and <code class=\"language-text\">app.json</code>’s js property only loads relative files which both mean that there is no way to handle remote files.</p>\n<h2>Hack</h2>\n<p>The URL that you need to load for the Google Maps API is likely <a href=\"http://maps.google.com/maps/api/js?sensor=true\" target=\"_blank\">http://maps.google.com/maps/api/js?sensor=true</a> and if you look at this file you can plainly see that it bootstraps their API and creates a <code class=\"language-text\">&amp;#60;script&amp;#62;</code> element to load the actual API. You could, in theory (I haven’t tested it) create a local file that has this source and it would work but it’s a hack and I wouldn’t recommend it. Yeah, I have see someone do this and the reason was because they really didn’t have any other way to load the Google Maps API before their app was launched which I couldn’t blame them for trying it.</p>\n<h2>Savior</h2>\n<p>I haven’t dug into the source for Sencha Command and the microloader (<code class=\"language-text\">Ext.blink</code>) so I took it upon myself to jump head first to implement a way to load remote files using a simple config in <code class=\"language-text\">app.json</code>. I wanted to add a simple and descriptive config to the config objects you can put into the <code class=\"language-text\">js</code> array and the <code class=\"language-text\">&quot;remote&quot;</code> config was born. This config would mark that resource as being a remote file and accepts <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> (defaults to <code class=\"language-text\">false</code>, well, <code class=\"language-text\">undefined</code> really but it’s falsey so the same in this instance).</p>\n<h2>Sencha Touch 2.0.2</h2>\n<p>First thing I notice while digging into Sencha Command was that it copies the files to the <code class=\"language-text\">build</code> folder in a couple places. A few <code class=\"language-text\">if</code> statements and solved that issue. Tested and things were working great! I didn’t do enough testing admittedly and this was released for Sencha Touch 2.0.2. <a href=\"http://twitter.com/themightychris\" target=\"_blank\">@themightychris</a> (Chris Alfano from Jarv.us Innovations) tweeted about how to load remote files in Sencha Touch 2 and as a proud father of what I thought worked I told him about the <code class=\"language-text\">&quot;remote&quot;</code> config. He replied with errors… oh boy. I should have known it was too easy to throw a couple <code class=\"language-text\">if</code> statements at a problem and expect it to work fully. The next day I didn’t do any work on the Forums until I fixed it, my fault, my problem, my fix.</p>\n<p>What it does now is when Sencha Command builds the <code class=\"language-text\">index.html</code> it will create <code class=\"language-text\">&amp;#60;script&amp;#62;</code> elements for your remote JavaScript files and <code class=\"language-text\">&amp;#60;link&amp;#62;</code> elements for your remote CSS files. The microloader, the system responsible for actually loading the resources, submits Ajax calls to load the assets and once all the assets have been loaded it then kicks off your application’s <code class=\"language-text\">launch</code> method. So why create <code class=\"language-text\">&amp;#60;script&amp;#62;</code> files in the builder and not let the microloader do the loading? The issue I came across is I couldn’t accurately determine when the Google Maps API was loaded due to it creating it’s own <code class=\"language-text\">&amp;#60;script&amp;#62;</code> tag as mentioned before (see why I explained that now?). I could determine when the <code class=\"language-text\">&amp;#60;script&amp;#62;</code> element that I created would load but not the <code class=\"language-text\">&amp;#60;script&amp;#62;</code> element the Google Map bootstrap element I created would create so the <code class=\"language-text\">launch</code> method would fire before the Google Maps API was actually loaded causing issues with my <code class=\"language-text\">Ext.Map</code> test. So not knowing what people will use I felt creating <code class=\"language-text\">&amp;#60;script&amp;#62;</code> elements in the <code class=\"language-text\">index.html</code> the safest solution. So once you do a production build, you can see the <code class=\"language-text\">&amp;#60;script&amp;#62;</code> elements in <code class=\"language-text\">index.html</code> that Sencha Command created. Not the prettiest solution but sometimes you just don’t have the control you want. This fix will be part of the next release (2.0.3 I believe it will be) but for you premium users it should be in SVN and part of the nightly builds you can get from <a href=\"http://support.sencha.com/\" target=\"_blank\">http://support.sencha.com/</a></p>\n<h2>Example</h2>\n<p>Enough backstory, I know you are craving some code! Diving into the Sencha Touch 2.0.3 directory I created a simple app:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">cd ~/Sites/sencha-touch-2.0.3\nsencha app create MyApp ../MyApp</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Simple to create an app isn’t it? Hell yeah it is (I was a doubter but now I’m a promoter)! I then edited the <code class=\"language-text\">MyApp.view.Main</code> class to add an <code class=\"language-text\">Ext.Map</code> item as the 2nd item so I opened the <code class=\"language-text\">~/Sites/MyApp/view/Main.js</code> in my editor (IntelliJ IDEA if you were wondering) and added this code as index 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n    xtype   : &#39;map&#39;,\n    title   : &#39;Map&#39;,\n    iconCls : &#39;maps&#39;\n},</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>and of course added <code class=\"language-text\">Ext.Map</code> to the <code class=\"language-text\">requires</code> array at the top of the file. So now we have our view using <code class=\"language-text\">Ext.Map</code> which will use the Google Maps API so we need to add the JavaScript file in <code class=\"language-text\">app.json</code> so I opened <code class=\"language-text\">app.json</code> and made 2 edits. First I added this code after the <code class=\"language-text\">sencha-touch.js</code> asset in the <code class=\"language-text\">js</code> property array:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n    &quot;path&quot;: &quot;http://maps.google.com/maps/api/js?sensor=true&quot;,\n    &quot;remote&quot;: true\n},</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>and then at the bottom to get around a current error I changed the <code class=\"language-text\">logger</code> config to <code class=\"language-text\">false</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&quot;buildOptions&quot;: {\n    &quot;product&quot;: &quot;touch&quot;,\n    &quot;minVersion&quot;: 3,\n    &quot;debug&quot;: false,\n    &quot;logger&quot;: false\n},</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So now <code class=\"language-text\">app.json</code> is going to tell Sencha Command to include the Google Maps’ remote JavaScript file and the display the map in my <code class=\"language-text\">MyApp.view.Main</code> tab panel. First I need to test to make sure everything is working so I do a testing build:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">cd ~/Sites/MyApp\nsencha app build testing</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Launched <a href=\"http://localhost/MyApp/build/testing/\" target=\"_blank\">http://localhost/MyApp/build/testing/</a> in Chrome (my browser of choice) and everything displayed just fine, my map shows correctly (centered South-East of San Jose California because I didn’t tell it to center anywhere and that’s default). More importantly I checked out the console and there were not errors! Great, so from everything I know thus far my app is working perfectly so now I can deploy with a production build:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">sencha app build production</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Launched <a href=\"http://localhost/MyApp/build/production/\" target=\"_blank\">http://localhost/MyApp/build/production/</a> in Chrome (yup, still my favorite browser) and everything works perfectly!</p>\n<h2>Summary</h2>\n<p>So we learned some backstory on the issue at hand and the little bumpy road to the fix that is the <code class=\"language-text\">&quot;remote&quot;</code> config for your JavaScript and CSS assets in <code class=\"language-text\">app.json</code>. We then looked at building a simple example all using Sencha Command.</p>\n<p>Happy coding!</p>","fields":{"slug":"/2012/07/15/going-remote-with-sencha-command/"},"frontmatter":{"title":"Going Remote with Sencha Command","date":"July 15, 2012"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/07/15/going-remote-with-sencha-command/","previous":{"fields":{"slug":"/2012/07/11/var-me-this-convention/"},"frontmatter":{"title":"var me = this; convention"}},"next":{"fields":{"slug":"/2012/07/22/my-week-with-my-nexus-7/"},"frontmatter":{"title":"My week with my Nexus 7"}}}}}