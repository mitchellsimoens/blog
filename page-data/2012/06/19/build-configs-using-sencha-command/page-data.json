{"componentChunkName":"component---src-templates-blog-post-js","path":"/2012/06/19/build-configs-using-sencha-command/","webpackCompilationHash":"02bb8f8c0b363ef91a23","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"5e83112e-fde0-5f62-a331-fdb1669a4101","excerpt":"Many times when developing a Sencha Touch 2 app I often have to call remote data with a  to fill s. Simple thing to build a  with a  pointing to some server…","html":"<p>Many times when developing a Sencha Touch 2 app I often have to call remote data with a <code class=\"language-text\">Store</code> to fill <code class=\"language-text\">List</code>s. Simple thing to build a <code class=\"language-text\">Store</code> with a <code class=\"language-text\">Proxy</code> pointing to some server side script or <code class=\"language-text\">JSON</code> file. Simple stuff. Lately I have been using <a href=\"http://nodejs.org/\" title=\"Node.js\" target=\"_blank\">Node.js</a> for many of my servers but this can still be used if you are using <a href=\"http://www.apache.org/\" title=\"Apache\" target=\"_blank\">Apache</a> + <a href=\"http://www.php.net/\" title=\"PHP\" target=\"_blank\">PHP</a> or <a href=\"http://www.silkjs.org/\" title=\"SilkJS\" target=\"_blank\">SilkJS</a> or whatever. I test the server code locally but of course when I deploy I will have the remote server setup and want to use the remote server for production and local server for development as I’m sure many are also doing. Before starting, this is assumed you have a fresh app created using Sencha Command via:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd /path/to/sencha-touch-2.0.1.1/\nsencha app create Test ../Test</code></pre></div>\n<p>Since I have different environments with different a different base url for each environment I create a <code class=\"language-text\">Config</code> utility class to easily change the base url for when I deploy. This utility class looks like this in a simple form:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ext.define(&#39;Test.util.Config&#39;, {\n    singleton : true,\n\n    config : {\n        baseUrl : &#39;http://www.mitchellsimoens.com/&#39;\n    },\n\n    constructor : function(config) {\n        this.initConfig(config);\n\n        this.callParent([config]);\n    }\n});</code></pre></div>\n<p>So this will create a <code class=\"language-text\">Test.util.Config</code> singleton class which we can execute the <code class=\"language-text\">Test.util.Config.getBaseUrl()</code> in your <code class=\"language-text\">Store</code>s like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ext.define(&#39;Test.store.Users&#39;, {\n    extend : &#39;Ext.data.Store&#39;,\n\n    requires : [\n        &#39;Test.model.User&#39;\n    ],\n\n    config : {\n        autoLoad : true,\n        model    : &#39;Test.model.User&#39;,\n        proxy    : {\n            type  : &#39;ajax&#39;,\n            url   : Test.util.Config.getBaseUrl() + &#39;get/users&#39;\n        }\n    }\n});</code></pre></div>\n<p>When the <code class=\"language-text\">Users.js</code> file is evalutaed by the browser it will execute the <code class=\"language-text\">Test.util.Config.getBaseUrl()</code> and so the url that is on the prototype is actually <code class=\"language-text\">&#39;http://www.mitchellsimoens.com/get/users&#39;</code> which is fantastic. To make this work your <code class=\"language-text\">app.js</code> file should look like (removed some code):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ext.Loader.setPath(&#39;Test&#39;, &#39;app&#39;);\n\nExt.require([\n    &#39;Test.util.Config&#39;\n]);\n\nExt.application({\n    //..\n\n    stores : [\n        &#39;Users&#39;\n    ]\n});</code></pre></div>\n<p>So we have an application with a <code class=\"language-text\">Users Store</code> and a <code class=\"language-text\">Config</code> utility class and the Users store is autoLoading from <code class=\"language-text\">http://www.mitchellsimoens.com/get/users</code> but we are still in development so we want to hit <code class=\"language-text\">localhost</code> not <code class=\"language-text\">www.mitchellsimoens.com</code>. We could just change the <code class=\"language-text\">baseUrl</code> config in <code class=\"language-text\">Test.util.Config</code> but that’s manual and there is an automatic way for when you do a build and that is using <code class=\"language-text\">//&amp;#60;debug&amp;#62;</code> and <code class=\"language-text\">//&amp;#60;/debug&amp;#62;</code>. When you do any build:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd /path/to/Test\nsencha app build [testing|production|package|native]</code></pre></div>\n<p>Anything between the <code class=\"language-text\">//&amp;#60;debug&amp;#62;</code> and <code class=\"language-text\">//&amp;#60;/debug&amp;#62;</code> will automatically get removed. Get where I am going? So instead of manually changing the <code class=\"language-text\">baseUrl</code>, just do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ext.define(&#39;Test.util.Config&#39;, {\n    singleton : true,\n\n    config : {\n        baseUrl : &#39;http://www.mitchellsimoens.com/&#39;\n    },\n\n    constructor : function (config) {\n        this.initConfig(config);\n\n        this.callParent([config]);\n    }\n//&lt;debug&gt;\n},\nfunction () {\n    this.setConfig({\n        baseUrl : &#39;http://localhost/&#39;\n    });\n//&lt;/debug&gt;\n});</code></pre></div>\n<p>What this will do is when the <code class=\"language-text\">Ext.define</code> is finished creating the class definition and creating the singleton class it will execute the callback function which we are using to set the <code class=\"language-text\">baseUrl</code> config to <code class=\"language-text\">&#39;http://localhost/&#39;</code> which is overriding the <code class=\"language-text\">&#39;http://www.mitchellsimoens.com/&#39;</code>. And since we wrapped the new code in <code class=\"language-text\">//&amp;#60;debug&amp;#62;</code> and <code class=\"language-text\">//&amp;#60;/debug&amp;#62;</code> it will remove this override when we do any of the builds automatically switching the <code class=\"language-text\">baseUrl</code> for us not manually.</p>\n<p>Further more, when you use <code class=\"language-text\">requires</code> and <code class=\"language-text\">uses</code> properties when creating class definitions you can remove those lines saving some space as they should all be within the built <code class=\"language-text\">app.js</code> file. So our <code class=\"language-text\">Users Store</code> we have above could be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Ext.define(&#39;Test.store.Users&#39;, {\n    extend : &#39;Ext.data.Store&#39;,\n\n    //&lt;debug&gt;\n    requires : [\n        &#39;Test.model.User&#39;\n    ],\n    //&lt;/debug&gt;\n\n    config : {\n        autoLoad : true,\n        model    : &#39;Test.model.User&#39;,\n        proxy    : {\n            type  : &#39;ajax&#39;,\n            url   : Test.util.Config.getBaseUrl() + &#39;get/users&#39;\n        }\n    }\n});</code></pre></div>\n<p>And that will remove the <code class=\"language-text\">requires</code> property when you do a build saving 3 lines (plus the two for the debug comments) as it’s not needed in a production build.</p>\n<p>This is a trick of the trade that I found when developing Sencha Touch 2 apps using Sencha Command and one trick that I am really loving!</p>","fields":{"slug":"/2012/06/19/build-configs-using-sencha-command/"},"frontmatter":{"title":"Build configs using Sencha Command","date":"June 19, 2012"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2012/06/19/build-configs-using-sencha-command/","previous":{"fields":{"slug":"/2012/04/04/friends-and-life/"},"frontmatter":{"title":"Friends and life"}},"next":{"fields":{"slug":"/2012/07/11/var-me-this-convention/"},"frontmatter":{"title":"var me = this; convention"}}}}}