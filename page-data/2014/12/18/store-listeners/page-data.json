{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/12/18/store-listeners/","webpackCompilationHash":"1f2b70db33523662b1d3","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"7ee6f642-c5f6-5a5f-9d67-34b9c4d7acee","excerpt":"No doubt, you likely have a store or two in your Ext JS/Touch application. Have you had to add a listener to the store to do something? Maybe update a component…","html":"<p>No doubt, you likely have a store or two in your Ext JS/Touch application. Have you had to add a listener to the store to do something? Maybe update a component when the store loads? Or take any action based on it? Like anything, there’s a good way to do it but there may be a better way. Let’s discuss some of these ways.</p>\n<p><em>Disclaimer: Some of these techniques use private methods and therefore need to use at your own risk. I have used them and feel confident they will not change but it always could.</em></p>\n<h4>Listening to a store load in a component</h4>\n<p>One of the most popular components in Ext JS is the grid (<code class=\"language-text\">Ext.grid.Panel</code>) and it so happens to use a store which likely loads data remotely. A configuration I have in my abstract grid class for my projects (for more on abstracts, please see my blog on <a href=\"https://sencha.guru/2014/12/04/abstract-vs-override/\">Abstract vs Override</a>) is to automatically setup a paging toolbar. With it, I like to hide the paging toolbar when there is only one page of data. So with that requirement, I need to take action on when the store loads to then show or hide the paging toolbar.</p>\n<p>First, let’s look at an example abstract grid that will setup the paging toolbar:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;Abstracts.grid.Panel&#39;, {\n    extend : &#39;Ext.grid.Panel&#39;,\n    xtype  : &#39;abstracts-gridpanel&#39;,\n\n    config : {\n        autoHidePaging : true,\n        pageable       : true\n    },\n\n    initComponent : function() {\n        var me = this,\n            dockedItems = me.dockedItems || [],\n            pageable = me.getPageable();\n\n        me.initStore();\n\n        if (pageable) {\n            dockedItems.push(pageable);\n        }\n\n        me.dockedItems = dockedItems;\n\n        me.callParent();\n    },\n\n    applyPageable : function(pageable, oldPageable) {\n        if (pageable) {\n            if (!Ext.isObject(pageable)) {\n                pageable = {};\n            }\n\n            Ext.applyIf(pageable, {\n                dock  : &#39;bottom&#39;,\n                store : this.initStore()\n            });\n        }\n\n        return Ext.factory(pageable, Ext.toolbar.Paging, oldPageable);\n    },\n\n    initStore : function() {\n        var me = this,\n            store = me.store;\n\n        if (store &amp;&amp; !store.isStore) {\n            store = me.store = Ext.data.StoreManager.lookup(store);\n\n            //overwrite this method to simply return the store\n            me.initStore = me.getStore;\n        }\n\n        return store;\n    }\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This is just a snippet but will add a paging toolbar to the grid with the benefit of automatically setting the grid’s store on the toolbar. If we use it now, the grid will work and display the paging toolbar and allow users to navigate within the pages.</p>\n<p>Now we need to work with our requirement to show/hide the toolbar dependant on number of pages available. I’m sure most would add a load listener to the store like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">store.on(&#39;load&#39;, me.handleStoreLoad);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>and then in the handleStoreLoad method take action which would work but there is a better way. We know the grid already takes action on store loading right? Otherwise how could it display the data? So isn’t there already a load listener somewhere? Yes there is! <code class=\"language-text\">Ext.grid.Panel</code> extends <code class=\"language-text\">Ext.panel.Table</code> which sets a load listener to execute a <code class=\"language-text\">onStoreLoad</code> method. Instead of adding our own listener, why not just take advantage of this function? First, we need to understand the method. On <code class=\"language-text\">Ext.panel.Table</code>, it’s defined as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// template method meant to be overriden\nonStoreLoad: Ext.emptyFn,</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>So it’s just a template method not doing anything. Checking <code class=\"language-text\">Ext.grid.Panel</code> it doesn’t override it so there is no ancestor that does anything with the method and therefore we now know that we don’t need to execute <code class=\"language-text\">this.callParent</code> when we override it. So we can add our <code class=\"language-text\">onStoreLoad</code> method to show and hide the paging toolbar as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">onStoreLoad : function(store) {\n    if (this.getAutoHidePaging()) {\n        var toolbar = this.getPageable();\n\n        if (toolbar) {\n            if (store.getTotalCount() / store.pageSize &lt;= 1) {\n                //only one page of data available\n                toolbar.hide();\n            } else {\n                //more than one page is available\n                toolbar.show();\n            }\n        }\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We just acted on a store load without setting our own store load listener and taking advantage of the class system.</p>\n<h4>Listening within a store</h4>\n<p>What if we wanted to do something within a subclass of <code class=\"language-text\">Ext.data.Store</code> when the store loads? We could do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.store.Users&#39;, {\n    extend : &#39;Ext.data.Store&#39;,\n    alias  : &#39;myapp-users&#39;,\n\n    proxy : {\n        type : &#39;ajax&#39;,\n        url  : &#39;foo.json&#39;\n    },\n\n    constructor : function(config) {\n        this.callParent([config]);\n\n        this.on(&#39;load&#39;, this.doSomething);\n    },\n\n    doSomething : function() {}\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Where we set a listener but like what we did with the grid, we can do some research to see if we can do something without setting an event listener. Without going into details on the process a store and proxy go through to load, the proxy is what does the actual request and the store is just a holder of records. But the store has to take action when the proxy finishes it’s loading so it can add the records to it’s internal collection. The method on the store is cleverly named <code class=\"language-text\">onProxyLoad</code> which is also where the load event is actually fired. So we can then hook into this method like such:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.store.Users&#39;, {\n    extend : &#39;Ext.data.Store&#39;,\n    alias  : &#39;myapp-users&#39;,\n\n    proxy : {\n        type : &#39;ajax&#39;,\n        url  : &#39;foo.json&#39;\n    },\n\n    onProxyLoad : function(operation) {\n        this.callParent([operation]);\n\n        this.doSomething();\n    },\n\n    doSomething : function() {}\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And now <code class=\"language-text\">doSomething</code> will execute whenever the proxy returns it’s loading without setting any listener.</p>\n<h4>Conclusion</h4>\n<p>I hope this method of reacting to store loads can be thought of for other functions not just store loading. Overriding methods can perform better than listening to events but do have some drawbacks. When overriding methods, you always need to make sure to research that method so you will not break anything.</p>","fields":{"slug":"/2014/12/18/store-listeners/"},"frontmatter":{"title":"Store Listeners","date":"December 18, 2014"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2014/12/18/store-listeners/","previous":{"fields":{"slug":"/2014/12/17/a-cause-in-poor-performance/"},"frontmatter":{"title":"A cause in poor performance"}},"next":{"fields":{"slug":"/2014/12/19/mon-vs-on/"},"frontmatter":{"title":"A Naming Strategy"}}}}}