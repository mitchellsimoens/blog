{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020/09/03/npm-install/","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"c418a659-ca14-5944-bb34-10fc584298d4","excerpt":"In the world of Node.js, you’re gonna be using the npm cli tool. You’re\nalso going to find lots of blogs telling you how to do things but I constantly find one…","html":"<p>In the world of <a href=\"https://nodejs.org/\">Node.js</a>, you’re gonna be using the <a href=\"https://www.npmjs.com/\">npm cli tool</a>. You’re\nalso going to find lots of blogs telling you how to do things but I constantly find one piece of info lacking and\nsurprisingly, this is about installing node modules in a project. Well, I guess there are two things that are related\nand one sort of makes the other moot.</p>\n<h2>Version Pinning</h2>\n<p>One thing I always try to get people to do is pin versions of their dependencies in <code class=\"language-text\">package.json</code>. What pinning does is\nmakes anyone installing the dependencies always have the same version. By default, npm adds the <code class=\"language-text\">~</code> prefix to the\nversions so if you were to <code class=\"language-text\">npm i @mitchellsimoens/versionator</code> it will use <code class=\"language-text\">^1.0.5</code> as the version. This means, if\n1.0.6 or 1.1.0 is released, someone could have a different version that has been untested and may have features not\npresent in older versions. This can add confusion but even worse, this can add risk (even for\n<a href=\"https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes\">attacks</a>). The <code class=\"language-text\">~</code> prefix is a little better\nbut the same issues can still occur only it locks down the possibilities to patch versions not minor versions.</p>\n<p>So what’s the big deal? In today’s world, we have to admit we freely install node modules from anyone. This means we\nput a lot of faith in people and while I would hope people have great intentions, some don’t and even great intentions\naren’t perfect. Also, not everyone follows semver strictly so a minor version maybe should have been a major.</p>\n<p>You’re best to protect yourself as best as you can by pinning versions. I even change the default to always pin via\nnpm’s config:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sh line-numbers\"><code class=\"language-sh\">npm config set save-exact=true</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>I’ll be honest though, this is a bit of a false sense of security as it’s not 100% but it’s at least some form of\nprevention. Someone I work with found this <a href=\"https://docs.renovatebot.com/dependency-pinning/\">blog post</a> that does a\ngreat job at some pros/cons of version pinning so I definitely think that is worth a read.</p>\n<h2>The Right Command</h2>\n<p>The other thing sort of makes version pinning moot. Say you clone a repo that contains a node project, what do you do\nfirst? I bet you run <code class=\"language-text\">npm install</code> (or <code class=\"language-text\">npm i</code>). You just used the wrong command. Instead, and hopefully everyone checks\nin the <code class=\"language-text\">package-lock.json</code> into VCS, you should get into the habit of using <code class=\"language-text\">npm ci</code>. What this command does is installs\nwhat is in <code class=\"language-text\">package-lock.json</code>. If you used <code class=\"language-text\">npm install</code>, npm will go and try to find the latest version of your\ndependencies (and their dependencies) that match the version and version prefixes come into play then. Npm will then\nupdate the <code class=\"language-text\">package-lock.json</code> with these updated versions and you just introduced risk.</p>\n<p>In fact, I ran a quick poll of some colleagues and 10 out of 11 (the poll got pushed way off screen with all the\nreplies) used <code class=\"language-text\">npm install</code> and some didn’t even know about <code class=\"language-text\">npm ci</code>. The one person is someone I work with a lot so\nwasn’t a surprise there. This is also why I will still pin versions to get at least some sort of protection from those\nnot using <code class=\"language-text\">npm ci</code> when they should.</p>\n<p>If you are adding a dependency, then use <code class=\"language-text\">npm install</code> since that will just add the dependency(ies) and not upgrade all\nexisting dependencies. If you are wanting to install all dependencies then use <code class=\"language-text\">npm ci</code> and protect yourself.</p>","fields":{"readingTime":{"text":"3 min read"},"slug":"/2020/09/03/npm-install/"},"frontmatter":{"title":"NPM Install","date":"September 03, 2020"}}},"pageContext":{"slug":"/2020/09/03/npm-install/","previous":{"fields":{"slug":"/2020/06/15/npm-publish-gpr/"},"frontmatter":{"title":"NPM Publish to GPR and NPM"}},"next":null}},"staticQueryHashes":["63159454","734670849"]}