{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2013/03/10/client-side-associations/","result":{"data":{"site":{"siteMetadata":{"title":"Mitchell Simoens Blog","author":"Mitchell Simoens"}},"markdownRemark":{"id":"ebb2b1d1-f490-5a21-88e4-cecd3056c5d1","excerpt":"Something that I have seen and heard was how to work with associations. This is a loaded topic but in an application I am working on I have worked with…","html":"<p>Something that I have seen and heard was how to work with associations. This is a loaded topic but in an application I am working on I have worked with something that I don’t think is a very known or talked about topic which is working with associations only in the client. It’s surprisingly easy.</p>\n<h2>Application Need</h2>\n<p>This doesn’t have anything to do with the application I am working on, that’s secret but the need of this example application is a user has an address book. Each address book entry has an association to the user the entry is for and also for the owner of the address book. So we will only have 2 models, one for the address book entry and one for the user. The address book entry model has a hasOne association to the user the entry is for and a belongsTo association to the owning user the entry belongs to. Likewise, the user model has a hasMany association to the address book entries (owner has many entries) and a belongsTo association to the address book entry (user belongs to an entry). The user model could also have a hasMany providing an association that the user could belong to many entries but for this example let’s not get all carried away.</p>\n<p>So can you picture the models that we could setup for our Ext JS 4 application? Let’s take a look at the models:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.model.User&#39;, {\n    extend : &#39;Ext.data.Model&#39;,\n\n    fields : [\n        &#39;id&#39;,\n        &#39;firstName&#39;,\n        &#39;lastName&#39;\n    ],\n\n    associations : [\n        {\n            type           : &#39;hasMany&#39;,\n            model          : &#39;MyApp.model.Address&#39;,\n            getterName     : &#39;getAddresses&#39;,\n            associationKey : &#39;AddressBook&#39;\n        },\n        {\n            type           : &#39;belongsTo&#39;,\n            model          : &#39;MyApp.model.Address&#39;,\n            getterName     : &#39;getAddress&#39;,\n            associationKey : &#39;Address&#39;\n        }\n    ]\n});\n\nExt.define(&#39;MyApp.model.Address&#39;, {\n    extend : &#39;Ext.data.Model&#39;,\n\n    fields : [\n        &#39;id&#39;,\n        &#39;userid&#39;,\n        &#39;ownerid&#39;\n    ],\n\n    associations : [\n        {\n            type           : &#39;hasOne&#39;,\n            model          : &#39;MyApp.model.User&#39;,\n            getterName     : &#39;getUser&#39;,\n            associatedName : &#39;User&#39;,\n            associationKey : &#39;User&#39;\n        },\n        {\n            type           : &#39;belongsTo&#39;,\n            model          : &#39;MyApp.model.User&#39;,\n            getterName     : &#39;getOwner&#39;,\n            associatedName : &#39;Owner&#39;,\n            associationKey : &#39;Owner&#39;\n        }\n    ]\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>First I want to show how to load an adress book for some user. Here is a sample JSON that we will use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n    &quot;success&quot; : true,\n    &quot;total&quot;   : 5,\n    &quot;data&quot;    : [\n        {\n            &quot;id&quot;      : 1,\n            &quot;userid&quot;  : 2,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 2,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;A&quot;,\n                &quot;email&quot;     : &quot;personA@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 2,\n            &quot;userid&quot;  : 3,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 3,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;B&quot;,\n                &quot;email&quot;     : &quot;personB@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 3,\n            &quot;userid&quot;  : 4,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 4,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;C&quot;,\n                &quot;email&quot;     : &quot;personC@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 4,\n            &quot;userid&quot;  : 5,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 5,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;D&quot;,\n                &quot;email&quot;     : &quot;personD@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 5,\n            &quot;userid&quot;  : 6,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 6,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;E&quot;,\n                &quot;email&quot;     : &quot;personE@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        }\n    ]\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So we have a <code class=\"language-text\">success</code> and <code class=\"language-text\">total</code> property and our actual data is within the <code class=\"language-text\">data</code> property. I much prefer to be within a nesting like this as I believe everything should be setup for paging. Anyway so looking at the actual data we have the <code class=\"language-text\">userid</code>, which is the user ID that belongs to this entry, the <code class=\"language-text\">ownerid</code>, which is the user ID that owns this entry, the <code class=\"language-text\">User</code> which holds the associated data of the user that belongs to this entry and <code class=\"language-text\">Owner</code> which holds the associated data of the user that owns this entry. We are setup quite nice for what we need! All is left is to create a store that can use the <code class=\"language-text\">MyApp.model.Address</code> model and read this data and setup the associations.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">new Ext.data.Store({\n\tautoLoad  : true,\n    model     : &#39;MyApp.model.Address&#39;,\n\tproxy     : {\n    \ttype        : &#39;ajax&#39;,\n        url         : &#39;address_book.json&#39;,\n\t    reader      : {\n    \t    type : &#39;json&#39;,\n          \troot : &#39;data&#39;\n\t    },\n    \textraParams : {\n        \townerid  : 1\n        }\n\t},\n    listeners : {\n\t    load : function (store, recs) {\n    \t    var rec   = recs[0],\n        \t    user  = rec.getUser(),\n            \towner = rec.getOwner();\n\n            console.log(user);\n\t        console.log(owner);\n        }\n\t}\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Execute that and the store will automatically load the JSON file and further more has a <code class=\"language-text\">load</code> listener to just console out the user and owner. All works well right? Remote loading association is actually quite easy if you know the configs of associations and how to use it.</p>\n<h2>Back to the blog needs</h2>\n<p>So let’s get back to the need of this blog which is client side association, we want to create a store that does not load data remotely but has it all locally for some means, for this blog post just for fun. Let’s look at the store we will use for this, we will use the same models as above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">var addressBook = new Ext.data.Store({\n\tmodel     : &#39;MyApp.model.Address&#39;,\n    proxy     : {\n\t    type   : &#39;memory&#39;,\n    \treader : {\n            type : &#39;json&#39;,\n\t        root : &#39;data&#39;\n    \t}\n    },\n\tlisteners : {\n    \tload : function (store, recs) {\n        \tvar rec   = recs[0],\n            \tuser  = rec.getUser(),\n                owner = rec.getOwner();\n\n\t        console.log(user);\n    \t    console.log(owner);\n        }\n\t}\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Kept everything pretty much the same but removed the <code class=\"language-text\">autoLoad</code> config from the store, changed the proxy <code class=\"language-text\">type</code> to <code class=\"language-text\">&#39;memory&#39;</code> and removed the <code class=\"language-text\">url</code> config from the proxy all to make this store 100% be local only and not have any unneeded items. Many would try to use the store’s <code class=\"language-text\">add</code> method like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">store.add([\n    {\n        &quot;id&quot;      : 1,\n        &quot;userid&quot;  : 2,\n        &quot;ownerid&quot; : 1,\n        &quot;User&quot;    : {\n            &quot;id&quot;        : 2,\n            &quot;firstName&quot; : &quot;Person&quot;,\n            &quot;lastName&quot;  : &quot;A&quot;,\n            &quot;email&quot;     : &quot;personA@mitchellsimoens.com&quot;\n        },\n        &quot;Owner&quot;   : {\n            &quot;id&quot;        : 1,\n            &quot;firstName&quot; : &quot;Mitchell&quot;,\n            &quot;lastName&quot;  : &quot;Simoens&quot;,\n            &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n        }\n    },\n    {\n        &quot;id&quot;      : 2,\n        &quot;userid&quot;  : 3,\n        &quot;ownerid&quot; : 1,\n        &quot;User&quot;    : {\n            &quot;id&quot;        : 3,\n            &quot;firstName&quot; : &quot;Person&quot;,\n            &quot;lastName&quot;  : &quot;B&quot;,\n            &quot;email&quot;     : &quot;personB@mitchellsimoens.com&quot;\n        },\n        &quot;Owner&quot;   : {\n            &quot;id&quot;        : 1,\n            &quot;firstName&quot; : &quot;Mitchell&quot;,\n            &quot;lastName&quot;  : &quot;Simoens&quot;,\n            &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n        }\n    },\n    {\n        &quot;id&quot;      : 3,\n        &quot;userid&quot;  : 4,\n        &quot;ownerid&quot; : 1,\n        &quot;User&quot;    : {\n            &quot;id&quot;        : 4,\n            &quot;firstName&quot; : &quot;Person&quot;,\n            &quot;lastName&quot;  : &quot;C&quot;,\n            &quot;email&quot;     : &quot;personC@mitchellsimoens.com&quot;\n        },\n        &quot;Owner&quot;   : {\n            &quot;id&quot;        : 1,\n            &quot;firstName&quot; : &quot;Mitchell&quot;,\n            &quot;lastName&quot;  : &quot;Simoens&quot;,\n            &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n        }\n    },\n    {\n        &quot;id&quot;      : 4,\n        &quot;userid&quot;  : 5,\n        &quot;ownerid&quot; : 1,\n        &quot;User&quot;    : {\n            &quot;id&quot;        : 5,\n            &quot;firstName&quot; : &quot;Person&quot;,\n            &quot;lastName&quot;  : &quot;D&quot;,\n            &quot;email&quot;     : &quot;personD@mitchellsimoens.com&quot;\n        },\n        &quot;Owner&quot;   : {\n            &quot;id&quot;        : 1,\n            &quot;firstName&quot; : &quot;Mitchell&quot;,\n            &quot;lastName&quot;  : &quot;Simoens&quot;,\n            &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n        }\n    },\n    {\n        &quot;id&quot;      : 5,\n        &quot;userid&quot;  : 6,\n        &quot;ownerid&quot; : 1,\n        &quot;User&quot;    : {\n            &quot;id&quot;        : 6,\n            &quot;firstName&quot; : &quot;Person&quot;,\n            &quot;lastName&quot;  : &quot;E&quot;,\n            &quot;email&quot;     : &quot;personE@mitchellsimoens.com&quot;\n        },\n        &quot;Owner&quot;   : {\n            &quot;id&quot;        : 1,\n            &quot;firstName&quot; : &quot;Mitchell&quot;,\n            &quot;lastName&quot;  : &quot;Simoens&quot;,\n            &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n        }\n    }\n]);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This will load models into the store but if you inspect any of the model instances you will notice that it will not have the associations setup. This is because of one important thing that everyone needs to know. To get associations to work properly, the reader that is attached to the proxy has to be involved in reading the data to setup the associations. The reader is the sleeper, the key to the whole process and <code class=\"language-text\">store.add(...);</code> does not include the reader which is why the above <code class=\"language-text\">store.add(...);</code> does not work for the associations. So what does? The <code class=\"language-text\">loadRawData</code> method on the store does include the reader so will this work? Let’s look at how to use the <code class=\"language-text\">loadRawData</code> method with the <code class=\"language-text\">addressBook</code> store above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">addressBook.loadRawData({\n    &quot;success&quot; : true,\n    &quot;total&quot;   : 5,\n    &quot;data&quot;    : [\n        {\n            &quot;id&quot;      : 1,\n            &quot;userid&quot;  : 2,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 2,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;A&quot;,\n                &quot;email&quot;     : &quot;personA@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 2,\n            &quot;userid&quot;  : 3,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 3,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;B&quot;,\n                &quot;email&quot;     : &quot;personB@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 3,\n            &quot;userid&quot;  : 4,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 4,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;C&quot;,\n                &quot;email&quot;     : &quot;personC@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 4,\n            &quot;userid&quot;  : 5,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 5,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;D&quot;,\n                &quot;email&quot;     : &quot;personD@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        },\n        {\n            &quot;id&quot;      : 5,\n            &quot;userid&quot;  : 6,\n            &quot;ownerid&quot; : 1,\n            &quot;User&quot;    : {\n                &quot;id&quot;        : 6,\n                &quot;firstName&quot; : &quot;Person&quot;,\n                &quot;lastName&quot;  : &quot;E&quot;,\n                &quot;email&quot;     : &quot;personE@mitchellsimoens.com&quot;\n            },\n            &quot;Owner&quot;   : {\n                &quot;id&quot;        : 1,\n                &quot;firstName&quot; : &quot;Mitchell&quot;,\n                &quot;lastName&quot;  : &quot;Simoens&quot;,\n                &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n            }\n        }\n    ]\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Execute that and the <code class=\"language-text\">load</code> event fired so the <code class=\"language-text\">load</code> listener executes which will show that the association getter methods are there and return the proper data just like the remote loading example. Awesome! Something to add to this is we really don’t need the add method on the store as we can pass a second argument to the <code class=\"language-text\">loadRawData</code> method which will tell it to append the model instances created by the data you pass in to the current dataset of the store, pretty much exactly what the <code class=\"language-text\">add</code> method does just with passing the data to the reader. The <code class=\"language-text\">add</code> method can still be used as reading the data via the reader comes with a little overhead as it executes more code but it’s really minimal (depending on our data structure of course). This append argument is used like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">store.loadRawData(data, true);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Client side model associations</h2>\n<p>So we have a store being able to read associated data purely locally using the <code class=\"language-text\">loadRawData</code> method. But that’s not the full story of client side association handling. Models can live outside stores meaning you can create model instances by themselves. Let’s look at how we can do that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">var data = {\n    &quot;id&quot;      : 1,\n    &quot;userid&quot;  : 2,\n    &quot;ownerid&quot; : 1,\n    &quot;User&quot;    : {\n        &quot;id&quot;        : 2,\n        &quot;firstName&quot; : &quot;Person&quot;,\n        &quot;lastName&quot;  : &quot;A&quot;,\n        &quot;email&quot;     : &quot;personA@mitchellsimoens.com&quot;\n    },\n    &quot;Owner&quot;   : {\n        &quot;id&quot;        : 1,\n        &quot;firstName&quot; : &quot;Mitchell&quot;,\n        &quot;lastName&quot;  : &quot;Simoens&quot;,\n        &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n    }\n};\n\nvar address_entry = Ext.create(&#39;MyApp.model.Address&#39;, data);\n\nconsole.log(address_entry);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Execute that and see what is in the console. The instance has been created, the data is there for the <code class=\"language-text\">userid</code> and <code class=\"language-text\">ownerid</code> but check to see if the associations were made. They weren’t were they and why? Just like the <code class=\"language-text\">store.add(...);</code> call, simply creating a model instance does not run the data through the reader which if we remember from earlier the reader is the key. Unfortunately, as of Ext JS 4.2.0 there is no way to get the associations to work by any means out-of-the-box so now we have to think how to override the framework to do what we want. Setting a breakpoint before the <code class=\"language-text\">store.loadRawData</code> call and following the code as it jumps around the key method on the reader is the <code class=\"language-text\">readAssociated</code> method which is executed like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">reader.readAssociated(record, data);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>So you pass in a model instance (<code class=\"language-text\">record</code>) and the data that belongs to the record (<code class=\"language-text\">data</code>). So let’s see how we can utilize that method. The <code class=\"language-text\">constructor</code> of <code class=\"language-text\">Ext.data.Model</code> has four arguments: <code class=\"language-text\">data</code>, <code class=\"language-text\">id</code>, <code class=\"language-text\">rawData</code>, and <code class=\"language-text\">convertedData</code>. I don’t want to change the default behavior of <code class=\"language-text\">Ext.data.Model</code> so I really want to create a fifth argument of the constructor and further more I just want to create an abstract model for my app. So I need to create an abstract model and change the two current models to extend the abstract model and make the abstract model use the new argument to get the associations to be created. Let’s look at the three models:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Ext.define(&#39;MyApp.model.Abstract&#39;, {\n    extend : &#39;Ext.data.Model&#39;,\n\n    requires : &#39;Ext.data.proxy.Memory&#39;,\n\n    proxy : {\n        type : &#39;memory&#39;\n    },\n\n    constructor : function (data, id, raw, convertedData, parseAssociation) {\n        this.callParent([data, id, raw, convertedData]);\n\n        if (parseAssociation) {\n            this.proxy.reader.readAssociated(this, data);\n        }\n    }\n});\n\nExt.define(&#39;MyApp.model.User&#39;, {\n    extend : &#39;MyApp.model.Abstract&#39;,\n\n    fields : [\n        &#39;id&#39;,\n        &#39;firstName&#39;,\n        &#39;lastName&#39;\n    ],\n\n    associations : [\n        {\n            type           : &#39;hasMany&#39;,\n            model          : &#39;MyApp.model.Address&#39;,\n            getterName     : &#39;getAddresses&#39;,\n            associationKey : &#39;AddressBook&#39;\n        },\n        {\n            type           : &#39;belongsTo&#39;,\n            model          : &#39;MyApp.model.Address&#39;,\n            getterName     : &#39;getAddress&#39;,\n            associationKey : &#39;Address&#39;\n        }\n    ]\n});\n\nExt.define(&#39;MyApp.model.Address&#39;, {\n    extend : &#39;MyApp.model.Abstract&#39;,\n\n    fields : [\n        &#39;id&#39;,\n        &#39;userid&#39;,\n        &#39;ownerid&#39;\n    ],\n\n    associations : [\n        {\n            type           : &#39;hasOne&#39;,\n            model          : &#39;MyApp.model.User&#39;,\n            getterName     : &#39;getUser&#39;,\n            associatedName : &#39;User&#39;,\n            associationKey : &#39;User&#39;\n        },\n        {\n            type           : &#39;belongsTo&#39;,\n            model          : &#39;MyApp.model.User&#39;,\n            getterName     : &#39;getOwner&#39;,\n            associatedName : &#39;Owner&#39;,\n            associationKey : &#39;Owner&#39;\n        }\n    ]\n});</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The important part isn’t that we changed the <code class=\"language-text\">MyApp.model.User</code> and <code class=\"language-text\">MyApp.model.Address</code> to extend <code class=\"language-text\">MyApp.model.Abstract</code>. The important part is the <code class=\"language-text\">constructor</code> method of the <code class=\"language-text\">MyApp.model.Abstract</code>. You can see the fifth argument (<code class=\"language-text\">parseAssociation</code>) and the <code class=\"language-text\">if</code> statement checking that argument and executing the <code class=\"language-text\">readAssociated</code> method on the reader (we also specify a default proxy on the abstract) that we pass in <code class=\"language-text\">this</code> (the model instance) and the <code class=\"language-text\">data</code> argument. This should do it right? Time to test:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">var data = {\n    &quot;id&quot;      : 1,\n    &quot;userid&quot;  : 2,\n    &quot;ownerid&quot; : 1,\n    &quot;User&quot;    : {\n        &quot;id&quot;        : 2,\n        &quot;firstName&quot; : &quot;Person&quot;,\n        &quot;lastName&quot;  : &quot;A&quot;,\n        &quot;email&quot;     : &quot;personA@mitchellsimoens.com&quot;\n    },\n    &quot;Owner&quot;   : {\n        &quot;id&quot;        : 1,\n        &quot;firstName&quot; : &quot;Mitchell&quot;,\n        &quot;lastName&quot;  : &quot;Simoens&quot;,\n        &quot;email&quot;     : &quot;mitchellSimoens@mitchellsimoens.com&quot;\n    }\n};\n\nvar address_entry = Ext.create(&#39;MyApp.model.Address&#39;, data, null, null, null, true),\n    user          = address_entry.getUser(),\n    owner         = address_entry.getOwner();\n\nconsole.log(address_entry);\nconsole.log(user);\nconsole.log(owner);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Looking at the console we see 3 model instances consoled out, first is the address entry model instance and the other two are for the associations. Great! It works!</p>\n<h2>Summary</h2>\n<p>We first looked at how to use associations with remote data. We then spent some time getting a store to locally read data and get the associations to work. Building on that local store, we looked at getting associations to work replacing the <code class=\"language-text\">store.add</code> method. Lastly we got creating single model instances to use the reader to get associations to work.</p>\n<p>We have client side associations working within stores and models. We also found out the key to associations is the reader, the reader is where the associations are read and linked.</p>\n<p>Happy coding!</p>","fields":{"readingTime":{"text":"13 min read"},"slug":"/2013/03/10/client-side-associations/"},"frontmatter":{"title":"Client side associations","date":"March 10, 2013"}}},"pageContext":{"slug":"/2013/03/10/client-side-associations/","previous":{"fields":{"slug":"/2013/02/11/lesson-in-the-getelementconfig-method-and-config-object/"},"frontmatter":{"title":"Lesson in the getElementConfig method and config object"}},"next":{"fields":{"slug":"/2013/12/07/jsonp-explanation/"},"frontmatter":{"title":"JsonP Explanation"}}}}}