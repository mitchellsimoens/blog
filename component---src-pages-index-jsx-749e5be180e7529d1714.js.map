{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./src/utils/typography.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.jsx","webpack:///./src/components/seo.jsx","webpack:///./src/components/bio.jsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_bio__WEBPACK_IMPORTED_MODULE_2__","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_utils_typography__WEBPACK_IMPORTED_MODULE_5__","BlogIndex","_ref","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","a","createElement","map","_ref2","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","googleFonts","typography","Typography","m","module","exports","require","default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","React","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","Layout","header","children","pathname","react__WEBPACK_IMPORTED_MODULE_1___default","marginTop","gatsby__WEBPACK_IMPORTED_MODULE_2__","textDecoration","color","fontFamily","marginLeft","marginRight","maxWidth","padding","Date","getFullYear","href","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Bio","_public_static_d_3583473817_json__WEBPACK_IMPORTED_MODULE_1__","_data$site$siteMetada","social","react__WEBPACK_IMPORTED_MODULE_2___default","display","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","fixed","avatar","childImageSharp","alt","minWidth","borderRadius","imgStyle","react_twitter_embed__WEBPACK_IMPORTED_MODULE_4__","screenName","twitter","options","size"],"mappings":"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","file":"component---src-pages-index-jsx-749e5be180e7529d1714.js","sourcesContent":["/* eslint-disable react/no-danger,react/prop-types */\n\nimport React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { rhythm } from '../utils/typography';\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <div key={node.fields.slug}>\n            <h3\n              style={{\n                marginBottom: rhythm(1 / 4),\n              }}\n            >\n              <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                {title}\n              </Link>\n            </h3>\n            <small>{node.frontmatter.date}</small>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: node.frontmatter.description || node.excerpt,\n              }}\n            />\n          </div>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import Typography from 'typography';\nimport Wordpress2016 from 'typography-theme-wordpress-2016';\n\nWordpress2016.overrideThemeStyles = () => {\n  return {\n    'a.gatsby-resp-image-link': {\n      boxShadow: `none`,\n    },\n  };\n};\n\ndelete Wordpress2016.googleFonts;\n\nconst typography = new Typography(Wordpress2016);\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles();\n}\n\nexport default typography;\nexport const { rhythm } = typography;\nexport const { scale } = typography;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport { rhythm, scale } from '../utils/typography';\n\nconst Layout = ({ children, location, title }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  let header;\n\n  if (location.pathname === rootPath) {\n    header = (\n      <h1\n        style={{\n          ...scale(1.5),\n          marginBottom: rhythm(1.5),\n          marginTop: 0,\n        }}\n      >\n        <Link\n          style={{\n            boxShadow: `none`,\n            textDecoration: `none`,\n            color: `inherit`,\n          }}\n          to=\"/\"\n        >\n          {title}\n        </Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <h3\n        style={{\n          fontFamily: `Montserrat, sans-serif`,\n          marginTop: 0,\n        }}\n      >\n        <Link\n          style={{\n            boxShadow: `none`,\n            textDecoration: `none`,\n            color: `inherit`,\n          }}\n          to=\"/\"\n        >\n          {title}\n        </Link>\n      </h3>\n    );\n  }\n  return (\n    <div\n      style={{\n        marginLeft: `auto`,\n        marginRight: `auto`,\n        maxWidth: rhythm(24),\n        padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n      }}\n    >\n      <header>{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","/* eslint-disable react/prop-types */\n\n/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nexport default SEO;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\nimport { TwitterFollowButton } from 'react-twitter-embed';\n\nimport { rhythm } from '../utils/typography';\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.png/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  const { author, social } = data.site.siteMetadata;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: '100%',\n        }}\n        imgStyle={{\n          borderRadius: '50%',\n        }}\n      />\n\n      <div>\n        <p>\n          Written by {author} who is a long time nerd developing software and building computers and gadgets. Anything\n          expressed on this website are {author}\n          {`'`}s alone and do not represent his employer.\n        </p>\n\n        <TwitterFollowButton screenName={social.twitter} options={{ size: 'large' }} />\n      </div>\n    </div>\n  );\n};\n\nexport default Bio;\n"],"sourceRoot":""}