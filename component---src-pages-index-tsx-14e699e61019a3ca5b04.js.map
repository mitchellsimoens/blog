{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/utils/typography.ts","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/components/bio.tsx"],"names":["__webpack_require__","r","__webpack_exports__","React","d","pageQuery","gatsby__WEBPACK_IMPORTED_MODULE_0__","_components_bio__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","_utils_typography__WEBPACK_IMPORTED_MODULE_4__","BlogIndex","_ref","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","createElement","map","_ref2","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","scale","typography__WEBPACK_IMPORTED_MODULE_0__","typography__WEBPACK_IMPORTED_MODULE_0___default","n","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1__","typography_theme_wordpress_2016__WEBPACK_IMPORTED_MODULE_1___default","Wordpress2016","overrideThemeStyles","a.gatsby-resp-image-link","googleFonts","typography","Typography","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","a","loader","enqueue","createContext","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","Layout","children","header","pathname","marginTop","gatsby__WEBPACK_IMPORTED_MODULE_1__","textDecoration","color","fontFamily","marginLeft","marginRight","maxWidth","padding","Date","getFullYear","href","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Bio","_public_static_d_3583473817_json__WEBPACK_IMPORTED_MODULE_1__","_data$site$siteMetada","social","display","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","fixed","avatar","childImageSharp","alt","minWidth","borderRadius","imgStyle","react_twitter_embed__WEBPACK_IMPORTED_MODULE_3__","screenName","twitter","options","size"],"mappings":"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","file":"component---src-pages-index-tsx-14e699e61019a3ca5b04.js","sourcesContent":["/* eslint-disable react/no-danger,react/prop-types */\n\nimport React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport { rhythm } from '../utils/typography';\n\ninterface Props {\n  data: any;\n  location: any;\n}\n\ninterface Post {\n  node: any;\n}\n\nconst BlogIndex = ({ data, location }: Props): JSX.Element => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map(\n        ({ node }: Post): JSX.Element => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </div>\n          );\n        },\n      )}\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import Typography from 'typography';\n// @ts-ignore\nimport Wordpress2016 from 'typography-theme-wordpress-2016';\n\nWordpress2016.overrideThemeStyles = (): any => ({\n  'a.gatsby-resp-image-link': {\n    boxShadow: `none`,\n  },\n});\n\ndelete Wordpress2016.googleFonts;\n\nconst typography = new Typography(Wordpress2016);\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles();\n}\n\nexport default typography;\nexport const { rhythm } = typography;\nexport const { scale } = typography;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/* eslint-disable react/prop-types */\n\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport { rhythm, scale } from '../utils/typography';\n\ninterface Props {\n  children: JSX.Element | JSX.Element[];\n  location: any;\n  title: string;\n}\n\nconst Layout = ({ children, location, title }: Props): JSX.Element => {\n  // @ts-ignore\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const header =\n    location.pathname === rootPath ? (\n      <h1\n        style={{\n          ...scale(1.5),\n          marginBottom: rhythm(1.5),\n          marginTop: 0,\n        }}\n      >\n        <Link\n          style={{\n            boxShadow: `none`,\n            textDecoration: `none`,\n            color: `inherit`,\n          }}\n          to=\"/\"\n        >\n          {title}\n        </Link>\n      </h1>\n    ) : (\n      <h3\n        style={{\n          fontFamily: `Montserrat, sans-serif`,\n          marginTop: 0,\n        }}\n      >\n        <Link\n          style={{\n            boxShadow: `none`,\n            textDecoration: `none`,\n            color: `inherit`,\n          }}\n          to=\"/\"\n        >\n          {title}\n        </Link>\n      </h3>\n    );\n\n  return (\n    <div\n      style={{\n        marginLeft: `auto`,\n        marginRight: `auto`,\n        maxWidth: rhythm(24),\n        padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n      }}\n    >\n      <header>{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","/* eslint-disable react/prop-types */\n\n/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface Props {\n  description: string;\n  lang: string;\n  meta: any;\n  title: string;\n}\n\nfunction SEO({ description, lang, meta, title }: Props): JSX.Element {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nexport default SEO;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Image from 'gatsby-image';\n// @ts-ignore\nimport { TwitterFollowButton } from 'react-twitter-embed';\n\nimport { rhythm } from '../utils/typography';\n\nconst Bio = (): JSX.Element => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.png/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  const { author, social } = data.site.siteMetadata;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: '100%',\n        }}\n        imgStyle={{\n          borderRadius: '50%',\n        }}\n      />\n\n      <div>\n        <p>\n          Written by {author} who is a long time nerd developing software and building computers and gadgets. Anything\n          expressed on this website are {author}\n          {`'`}s alone and do not represent his employer.\n        </p>\n\n        <TwitterFollowButton screenName={social.twitter} options={{ size: 'large' }} />\n      </div>\n    </div>\n  );\n};\n\nexport default Bio;\n"],"sourceRoot":""}